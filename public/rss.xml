<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[생활의 지혜, 현명한 블로그 매거진은 여행, 수필, 경험담, 썰, 주식, 투자  | RSS Feed Title]]></title>
        <description><![CDATA[생활의 지혜, 현명한 블로그 매거진은 여행, 수필, 경험담, 썰, 주식, 투자 | RSS FEED Description!]]></description>
        <link>http://localhost:3000</link>
        <image>
            <url>http://localhost:3000/icon.png</url>
            <title>생활의 지혜, 현명한 블로그 매거진은 여행, 수필, 경험담, 썰, 주식, 투자  | RSS Feed Title</title>
            <link>http://localhost:3000</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 30 Jan 2024 03:30:38 GMT</lastBuildDate>
        <atom:link href="http://localhost:3000/rss.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Tue, 30 Jan 2024 03:30:38 GMT</pubDate>
        <copyright><![CDATA[All rights reserved 2024]]></copyright>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/아프리카/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/아프리카/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/아프리카/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/아프리카/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/아시아/## 동남아시아 여행지 장단점 소개

이번 글에서는 동남아 여행지 중 우리나라 사람들이 많이 방문하는 여행지 4곳에 대한 장단점을 정리해 보겠습니다.

소개할 동남아시아 국가 4곳은 베트남, 태국, 필리핀, 그리고 인도네시아이며 각 나라의 장단점을 고려하여 여행지 선택한다면 보다 본인과 가족에게 맞는 해외여행을 즐길 수 있을 것입니다.


### 베트남 (Vietnam)
베트남을 여행할 떄 보통 우리나라 사람들은 호치민과 다낭을 방문합니다.
호치민은 경제적 중심지로 높은 건물과 현대 문화가 돋보입니다.
박물관, 맛집, 사이공강의 일몰과 야경이 유명합니다.
다낭은 세계 6대 해변 중 하나로 손꼽히며, 명소와 자연 경관이 풍부합니다.
불교를 주로 믿으며, 베트남은 친절하고 여성이 혼자 다니기에 안전한 편입니다.
가격은 한국보다 저렴하며 음식과 교통비가 경제적입니다.
다만, 한국인이 많이 찾는 점과 길거리 음식의 위생에 주의해야 합니다.


### 태국 (Thailand)
태국의 주요 여행지로 방콕, 파타야, 치앙마이, 푸켓 등이 있습니다.
방콕은 번화가와 대도시로, 많은 쇼핑몰과 맛집이 있습니다.
파타야는 리조트와 밤문화가 풍부한 도시로, 시끌벅적한 분위기가 특징입니다.
치앙마이는 북쪽에 위치하며, 현대적인 도시보다는 로컬 느낌을 느낄 수 있습니다.
푸켓은 최대 휴양지로 아름다운 바다와 풍부한 스포츠 활동이 가능합니다.
태국의 물가는 동남아 국가 중에서는 비교적 비싼 편입니다.


### 필리핀 (Philippines)
필리핀을 여행하는 사람들은 주로 세부, 마닐라, 보라카이를 방문합니다.
세부는 다이빙 명소로 유명하며, 관광과 스포츠를 동시에 즐길 수 있는 장소입니다.
마닐라는 수도이자 현대적인 대도시로, 주로 비즈니스와 이민 거주를 위해 찾습니다.
보라카이는 휴양지로 유명하며, 화이트비치와 여러 리조트가 인기를 끌고 있습니다.
필리핀의 물가는 중간 정도이며, 동남아 국가 중에서는 치안이 상대적으로 좋지 않은 편입니다.


### 인도네시아 (Indonesia)
발리, 자카르타, 롬복, 빈탄섬 등이 인도네이시아의 주요 여행지입니다.
발리는 세계적인 휴양지로, 자연 경관과 대형 리조트가 많이 있습니다.
자카르타는 수도로, 현대적인 도시로서 다양한 구조물과 문화를 감상할 수 있습니다.
롬복은 트레킹이 많이 요구되는 지역으로, 자연 경관을 즐기기에 좋습니다.
빈탄섬은 골프장이 유명하며, 가족 여행에 적합한 곳입니다.
인도네시아의 물가는 대체로 저렴하며, 발리를 제외하면 다른 국가에 비해서는 여행지로서 상대적으로 알려져 있지 않은 편입니다.</link>
            <guid isPermaLink="true">http://localhost:3000/travel/아시아/## 동남아시아 여행지 장단점 소개

이번 글에서는 동남아 여행지 중 우리나라 사람들이 많이 방문하는 여행지 4곳에 대한 장단점을 정리해 보겠습니다.

소개할 동남아시아 국가 4곳은 베트남, 태국, 필리핀, 그리고 인도네시아이며 각 나라의 장단점을 고려하여 여행지 선택한다면 보다 본인과 가족에게 맞는 해외여행을 즐길 수 있을 것입니다.


### 베트남 (Vietnam)
베트남을 여행할 떄 보통 우리나라 사람들은 호치민과 다낭을 방문합니다.
호치민은 경제적 중심지로 높은 건물과 현대 문화가 돋보입니다.
박물관, 맛집, 사이공강의 일몰과 야경이 유명합니다.
다낭은 세계 6대 해변 중 하나로 손꼽히며, 명소와 자연 경관이 풍부합니다.
불교를 주로 믿으며, 베트남은 친절하고 여성이 혼자 다니기에 안전한 편입니다.
가격은 한국보다 저렴하며 음식과 교통비가 경제적입니다.
다만, 한국인이 많이 찾는 점과 길거리 음식의 위생에 주의해야 합니다.


### 태국 (Thailand)
태국의 주요 여행지로 방콕, 파타야, 치앙마이, 푸켓 등이 있습니다.
방콕은 번화가와 대도시로, 많은 쇼핑몰과 맛집이 있습니다.
파타야는 리조트와 밤문화가 풍부한 도시로, 시끌벅적한 분위기가 특징입니다.
치앙마이는 북쪽에 위치하며, 현대적인 도시보다는 로컬 느낌을 느낄 수 있습니다.
푸켓은 최대 휴양지로 아름다운 바다와 풍부한 스포츠 활동이 가능합니다.
태국의 물가는 동남아 국가 중에서는 비교적 비싼 편입니다.


### 필리핀 (Philippines)
필리핀을 여행하는 사람들은 주로 세부, 마닐라, 보라카이를 방문합니다.
세부는 다이빙 명소로 유명하며, 관광과 스포츠를 동시에 즐길 수 있는 장소입니다.
마닐라는 수도이자 현대적인 대도시로, 주로 비즈니스와 이민 거주를 위해 찾습니다.
보라카이는 휴양지로 유명하며, 화이트비치와 여러 리조트가 인기를 끌고 있습니다.
필리핀의 물가는 중간 정도이며, 동남아 국가 중에서는 치안이 상대적으로 좋지 않은 편입니다.


### 인도네시아 (Indonesia)
발리, 자카르타, 롬복, 빈탄섬 등이 인도네이시아의 주요 여행지입니다.
발리는 세계적인 휴양지로, 자연 경관과 대형 리조트가 많이 있습니다.
자카르타는 수도로, 현대적인 도시로서 다양한 구조물과 문화를 감상할 수 있습니다.
롬복은 트레킹이 많이 요구되는 지역으로, 자연 경관을 즐기기에 좋습니다.
빈탄섬은 골프장이 유명하며, 가족 여행에 적합한 곳입니다.
인도네시아의 물가는 대체로 저렴하며, 발리를 제외하면 다른 국가에 비해서는 여행지로서 상대적으로 알려져 있지 않은 편입니다.</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/아시아/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.


### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.


### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/아시아/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.


### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.


### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/캐나다/eTA 신청은 간단한 온라인 수속입니다. 

&lt;h1&gt;hello world&lt;/h1&gt;
&lt;u&gt;hello&lt;/u&gt;
&lt;p&gt;온라인 신청을 할 경우, 대부분 몇 분 이내에 eTA 승인을 이메일로 받게 됩니다. 하지만, 증빙 서류를 제출해야 할 경우에는 며칠이 걸릴 수도 있으므로, 캐나다 항공편을 예약하기 전에 eTA  받기를 권장합니다.&lt;/p&gt;
###### 온라인 신청을 할 경우, 대부분 몇 분 이내에 eTA 승인을 이메일로 받게 됩니다. 하지만, 증빙 서류를 제출해야 할 경우에는 며칠이 걸릴 수도 있으므로, 캐나다 항공편을 예약하기 전에 eTA  받기를 권장합니다.

![alt text](/imageTest1.webp &quot;ETAregistration1&quot;)


&lt;a href=&quot;https://www.canada.ca/en/immigration-refugees-citizenship/services/visit-canada/eta/important-reminders-apply-eta.html&quot; &gt;&lt;img src=&quot;/imageTest1.webp&quot; width=&quot;300px&quot;&gt;&lt;/a&gt;

![https://www.canada.ca/en/immigration-refugees-citizenship/services/visit-canada/eta/important-reminders-apply-eta.html](/imageTest2.jpeg &quot;ETAregistration2&quot;)

[ETA 신청 페이지 바로가기](https://www.canada.ca/en/immigration-refugees-citizenship/services/visit-canada/eta/important-reminders-apply-eta.html)


## eTA 신청 절차 
- 1. 여권과 신용카드 준비
- 2. 온라인 신청: 온라인 신청은 저장이 불가능하기 때문에 기재할 정보 미리 확인
-  3. 신청료 결제 $7 CAD (캐나다 달러)
-  4. eTA 신청 확인 이메일 확인
-   5. 증빙 서류 제출을 해야 할 경우, 72시간내 이메일 발송됨

## eTA 신청 준비물
-    1. 유효 비자 / 면제국 여권
-    2. 유효 이메일 주소
-    3. 결제 수단 : 신용카드, 선불 VISA, 선불Master, 선불AMEX, VISA DEBIT, DEBIT MASTER, 유니온 페이 등

## 유의사항: 꼭 기억해야 할 점
   - 1. 한 번에 1명씩 신청 및 결제 가능
   - 2. 결제하는 즉시 영수증 인쇄, 영수증 재발급 불가능
   - 3. 이메일로만 연락 가능

## 온라인 신청 방법 상세
  -  1. 부모/보호자 또는 대리인 세부 정보 입력
  &gt;    a. 신청서 첫 질문은 “Are you applying on behalf of someone?” – 다른 사람 대신 신청하나요? 
        &gt;    ▪ 본인을 위한 신청이면 “NO”, 대리인일 경우, “YES”
        &gt;    ▪ 부모가 자녀를 대신하여 신청할 경우, 두 번째 질문 “Are applying on behalf of minor?” 에  “YES” 
     &gt;   b. 대리인 신청일 경우, 다음 대리인 상세 페이지로 넘어갑니다. 상세 정보를 입력하고, 맨 아래 박스란 두 개 모두 체크 합니다.


  -  2. 본인 (대리인) 신청시 질문과 답
    &gt;    a. What travel document do you plan to use to travel to Canada? (캐나다 여행시 사용하고자 하는 증명서는? )
            ▪ Passport Regular (일반 여권)
    &gt;    b. What country issued your passport? (여권 발급 국가는?)
            ▪ KOR (Korea, South) 대한민국 [예시]
    &gt;    c. Select the code that matches the one on your passport? (여권에 있는 국가 코드는?)
            ▪ KOR (Korea, South) 대한민국 [예시]
    &gt;    d. What is the nationality noted on this passport? (국적은?)
            ▪ Korea, South 대한민국 [예시]
    &gt;    e. Personal details of applicant (개인 상세 정보)
            ▪ 이 부분은 개인 상세 정보란입니다. 여권번호 및 이름을 영문으로 정확히 기재하면 됩니다.
    &gt;    f. 마지막으로 Background Questions 입니다. 이 질문들에 대한 답이 “YES” 일 경우, 가능하면 세부정보를 제공해야 합니다.
            ▪ Have you ever refused a visa or permit, denied entry to, or ordered to leave Canada or any other country/territory?
(캐나다 또는 기타 다른 국가 및 영토에서 허가증 신청 거부, 입국거부, 추방 명령을 받은 경우가 있습니까?)
            ▪ Have you ever committed, been arrested for been charged with or convicted of any criminal offence in any country/territory?
(어느 국가에서든 형사 범죄를 저지르거나, 형사 범죄로 체포 또는 기소되거나, 유죄 판결을 받은 적이 있습니까?)
            ▪ Have you or a family member ever had or been in close contact with a person with tuberculosis?
(결핵 진단을 받았거나, 결핵보균자와 가깝게 접촉한 적이 있습니까?)
            ▪ Do you have a serious health condition for which you are receiving regular medical treatment?
(심각한 건강상의 문제로 정기적인 치료를 받고 있습니까?)
            ▪ Please briefly indicate if there are additional details pertinent to your application. Provide as many as possible to help with processing.
++ (그 외 신청서에 필요한 상세 기재 사항이 있으면 될 수 있는 한 자세히 서술해 주십시오.)++

## 신청자 서명 및 동의
`my_stock_index`
*the cookie\_cutter in italics*
-  1. 동의란에 체크
-  2. 신청서 서명에 전자 서명합니다. 
-  3. “Proceed to Payment” 누르면, $7 수수료 결제창으로 이동됩니다. 

## 신청서 제출 후 이메일 확인
마지막으로 아래와 같은 이메일이 발송됩니다. 

*italics* and _italics_
**bold** and __bold__
superscript^2^
~~strikethrough~~
&lt;u&gt;hello&lt;u&gt;
**underline**


aaaaa




</link>
            <guid isPermaLink="true">http://localhost:3000/travel/캐나다/eTA 신청은 간단한 온라인 수속입니다. 

&lt;h1&gt;hello world&lt;/h1&gt;
&lt;u&gt;hello&lt;/u&gt;
&lt;p&gt;온라인 신청을 할 경우, 대부분 몇 분 이내에 eTA 승인을 이메일로 받게 됩니다. 하지만, 증빙 서류를 제출해야 할 경우에는 며칠이 걸릴 수도 있으므로, 캐나다 항공편을 예약하기 전에 eTA  받기를 권장합니다.&lt;/p&gt;
###### 온라인 신청을 할 경우, 대부분 몇 분 이내에 eTA 승인을 이메일로 받게 됩니다. 하지만, 증빙 서류를 제출해야 할 경우에는 며칠이 걸릴 수도 있으므로, 캐나다 항공편을 예약하기 전에 eTA  받기를 권장합니다.

![alt text](/imageTest1.webp &quot;ETAregistration1&quot;)


&lt;a href=&quot;https://www.canada.ca/en/immigration-refugees-citizenship/services/visit-canada/eta/important-reminders-apply-eta.html&quot; &gt;&lt;img src=&quot;/imageTest1.webp&quot; width=&quot;300px&quot;&gt;&lt;/a&gt;

![https://www.canada.ca/en/immigration-refugees-citizenship/services/visit-canada/eta/important-reminders-apply-eta.html](/imageTest2.jpeg &quot;ETAregistration2&quot;)

[ETA 신청 페이지 바로가기](https://www.canada.ca/en/immigration-refugees-citizenship/services/visit-canada/eta/important-reminders-apply-eta.html)


## eTA 신청 절차 
- 1. 여권과 신용카드 준비
- 2. 온라인 신청: 온라인 신청은 저장이 불가능하기 때문에 기재할 정보 미리 확인
-  3. 신청료 결제 $7 CAD (캐나다 달러)
-  4. eTA 신청 확인 이메일 확인
-   5. 증빙 서류 제출을 해야 할 경우, 72시간내 이메일 발송됨

## eTA 신청 준비물
-    1. 유효 비자 / 면제국 여권
-    2. 유효 이메일 주소
-    3. 결제 수단 : 신용카드, 선불 VISA, 선불Master, 선불AMEX, VISA DEBIT, DEBIT MASTER, 유니온 페이 등

## 유의사항: 꼭 기억해야 할 점
   - 1. 한 번에 1명씩 신청 및 결제 가능
   - 2. 결제하는 즉시 영수증 인쇄, 영수증 재발급 불가능
   - 3. 이메일로만 연락 가능

## 온라인 신청 방법 상세
  -  1. 부모/보호자 또는 대리인 세부 정보 입력
  &gt;    a. 신청서 첫 질문은 “Are you applying on behalf of someone?” – 다른 사람 대신 신청하나요? 
        &gt;    ▪ 본인을 위한 신청이면 “NO”, 대리인일 경우, “YES”
        &gt;    ▪ 부모가 자녀를 대신하여 신청할 경우, 두 번째 질문 “Are applying on behalf of minor?” 에  “YES” 
     &gt;   b. 대리인 신청일 경우, 다음 대리인 상세 페이지로 넘어갑니다. 상세 정보를 입력하고, 맨 아래 박스란 두 개 모두 체크 합니다.


  -  2. 본인 (대리인) 신청시 질문과 답
    &gt;    a. What travel document do you plan to use to travel to Canada? (캐나다 여행시 사용하고자 하는 증명서는? )
            ▪ Passport Regular (일반 여권)
    &gt;    b. What country issued your passport? (여권 발급 국가는?)
            ▪ KOR (Korea, South) 대한민국 [예시]
    &gt;    c. Select the code that matches the one on your passport? (여권에 있는 국가 코드는?)
            ▪ KOR (Korea, South) 대한민국 [예시]
    &gt;    d. What is the nationality noted on this passport? (국적은?)
            ▪ Korea, South 대한민국 [예시]
    &gt;    e. Personal details of applicant (개인 상세 정보)
            ▪ 이 부분은 개인 상세 정보란입니다. 여권번호 및 이름을 영문으로 정확히 기재하면 됩니다.
    &gt;    f. 마지막으로 Background Questions 입니다. 이 질문들에 대한 답이 “YES” 일 경우, 가능하면 세부정보를 제공해야 합니다.
            ▪ Have you ever refused a visa or permit, denied entry to, or ordered to leave Canada or any other country/territory?
(캐나다 또는 기타 다른 국가 및 영토에서 허가증 신청 거부, 입국거부, 추방 명령을 받은 경우가 있습니까?)
            ▪ Have you ever committed, been arrested for been charged with or convicted of any criminal offence in any country/territory?
(어느 국가에서든 형사 범죄를 저지르거나, 형사 범죄로 체포 또는 기소되거나, 유죄 판결을 받은 적이 있습니까?)
            ▪ Have you or a family member ever had or been in close contact with a person with tuberculosis?
(결핵 진단을 받았거나, 결핵보균자와 가깝게 접촉한 적이 있습니까?)
            ▪ Do you have a serious health condition for which you are receiving regular medical treatment?
(심각한 건강상의 문제로 정기적인 치료를 받고 있습니까?)
            ▪ Please briefly indicate if there are additional details pertinent to your application. Provide as many as possible to help with processing.
++ (그 외 신청서에 필요한 상세 기재 사항이 있으면 될 수 있는 한 자세히 서술해 주십시오.)++

## 신청자 서명 및 동의
`my_stock_index`
*the cookie\_cutter in italics*
-  1. 동의란에 체크
-  2. 신청서 서명에 전자 서명합니다. 
-  3. “Proceed to Payment” 누르면, $7 수수료 결제창으로 이동됩니다. 

## 신청서 제출 후 이메일 확인
마지막으로 아래와 같은 이메일이 발송됩니다. 

*italics* and _italics_
**bold** and __bold__
superscript^2^
~~strikethrough~~
&lt;u&gt;hello&lt;u&gt;
**underline**


aaaaa




</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/캐나다/
캐나다의 서부 지역에 위치한 코퀴틀람(Coquitlam)은 매력적인 여행지로서 그 독특한 자연 경관과 풍부한 역사적 유산으로 무장하고 있습니다. 이 블로그 글에서는 코퀴틀람에서 즐길 수 있는 3가지 유명한 여행 장소를 소개하겠습니다.

## 민속 마을: 매혹적인 역사와 문화

&gt; 코퀴틀람 민속 마을(Coquitlam Heritage Village)은 이 지역의 역사와 문화를 탐구하기에 완벽한 장소입니다. 이 마을은 19세기 후반의 생활을 재현한 곳으로, 오래된 건물과 정통한 카나다 민속 마을의 분위기를 즐길 수 있습니다. 민속 마을을 방문하면, 예전 삶의 흔적을 찾고 고유한 공예품을 만드는 기회를 갖게 됩니다. 특히 여름에는 다양한 문화 행사와 축제가 개최되어 가족과 함께 즐기기에 더없이 좋은 장소입니다.

### 멋진 자연 경관: 몬트리올 공원

코퀴틀람의 몬트리올 공원(Mundy Park)은 자연을 사랑하는 이들에게 제격의 목적지입니다. 이 공원은 산책로와 하이킹로, 호수와 숲으로 가득 차 있어, 언제든 자연과 어울릴 수 있는 기회를 제공합니다. 특히 가을에는 황금빛으로 물든 나무들이 공원을 아름답게 꾸며줍니다. 몬트리올 공원에서 자연 속에서의 평화로운 시간을 보내며 스트레스를 풀어보세요.

### 아울렛 쇼핑의 낙원: 코퀴틀람 센터

코퀴틀람 센터(Coquitlam Centre)는 쇼핑 애호가들을 위한 천국입니다. 이 모던하고 대형 쇼핑 몰은 다양한 브랜드의 상점과 레스토랑, 엔터테인먼트 옵션을 제공하며, 당신의 쇼핑욕을 충족시켜줄 것입니다. 또한 쇼핑 후에는 근처 레스토랑에서 맛있는 음식을 즐길 수 있어 가족과 함께 또는 친구들과 즐기기에 이상적인 장소입니다.

코퀴틀람은 자연과 역사, 쇼핑의 다양한 즐길 거리를 제공하며, 방문객들에게 풍부한 경험을 선사합니다. 이곳을 방문하여 독특한 매력을 만끽하고 훌륭한 여행 추억을 만들어보세요.
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/캐나다/
캐나다의 서부 지역에 위치한 코퀴틀람(Coquitlam)은 매력적인 여행지로서 그 독특한 자연 경관과 풍부한 역사적 유산으로 무장하고 있습니다. 이 블로그 글에서는 코퀴틀람에서 즐길 수 있는 3가지 유명한 여행 장소를 소개하겠습니다.

## 민속 마을: 매혹적인 역사와 문화

&gt; 코퀴틀람 민속 마을(Coquitlam Heritage Village)은 이 지역의 역사와 문화를 탐구하기에 완벽한 장소입니다. 이 마을은 19세기 후반의 생활을 재현한 곳으로, 오래된 건물과 정통한 카나다 민속 마을의 분위기를 즐길 수 있습니다. 민속 마을을 방문하면, 예전 삶의 흔적을 찾고 고유한 공예품을 만드는 기회를 갖게 됩니다. 특히 여름에는 다양한 문화 행사와 축제가 개최되어 가족과 함께 즐기기에 더없이 좋은 장소입니다.

### 멋진 자연 경관: 몬트리올 공원

코퀴틀람의 몬트리올 공원(Mundy Park)은 자연을 사랑하는 이들에게 제격의 목적지입니다. 이 공원은 산책로와 하이킹로, 호수와 숲으로 가득 차 있어, 언제든 자연과 어울릴 수 있는 기회를 제공합니다. 특히 가을에는 황금빛으로 물든 나무들이 공원을 아름답게 꾸며줍니다. 몬트리올 공원에서 자연 속에서의 평화로운 시간을 보내며 스트레스를 풀어보세요.

### 아울렛 쇼핑의 낙원: 코퀴틀람 센터

코퀴틀람 센터(Coquitlam Centre)는 쇼핑 애호가들을 위한 천국입니다. 이 모던하고 대형 쇼핑 몰은 다양한 브랜드의 상점과 레스토랑, 엔터테인먼트 옵션을 제공하며, 당신의 쇼핑욕을 충족시켜줄 것입니다. 또한 쇼핑 후에는 근처 레스토랑에서 맛있는 음식을 즐길 수 있어 가족과 함께 또는 친구들과 즐기기에 이상적인 장소입니다.

코퀴틀람은 자연과 역사, 쇼핑의 다양한 즐길 거리를 제공하며, 방문객들에게 풍부한 경험을 선사합니다. 이곳을 방문하여 독특한 매력을 만끽하고 훌륭한 여행 추억을 만들어보세요.
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/캐나다/
캐나다의 서부 지역에 위치한 코퀴틀람(Coquitlam)은 매력적인 여행지로서 그 독특한 자연 경관과 풍부한 역사적 유산으로 무장하고 있습니다. 이 블로그 글에서는 코퀴틀람에서 즐길 수 있는 3가지 유명한 여행 장소를 소개하겠습니다.

## 민속 마을: 매혹적인 역사와 문화

&gt; 코퀴틀람 민속 마을(Coquitlam Heritage Village)은 이 지역의 역사와 문화를 탐구하기에 완벽한 장소입니다. 이 마을은 19세기 후반의 생활을 재현한 곳으로, 오래된 건물과 정통한 카나다 민속 마을의 분위기를 즐길 수 있습니다. 민속 마을을 방문하면, 예전 삶의 흔적을 찾고 고유한 공예품을 만드는 기회를 갖게 됩니다. 특히 여름에는 다양한 문화 행사와 축제가 개최되어 가족과 함께 즐기기에 더없이 좋은 장소입니다.

### 멋진 자연 경관: 몬트리올 공원

코퀴틀람의 몬트리올 공원(Mundy Park)은 자연을 사랑하는 이들에게 제격의 목적지입니다. 이 공원은 산책로와 하이킹로, 호수와 숲으로 가득 차 있어, 언제든 자연과 어울릴 수 있는 기회를 제공합니다. 특히 가을에는 황금빛으로 물든 나무들이 공원을 아름답게 꾸며줍니다. 몬트리올 공원에서 자연 속에서의 평화로운 시간을 보내며 스트레스를 풀어보세요.

### 아울렛 쇼핑의 낙원: 코퀴틀람 센터

코퀴틀람 센터(Coquitlam Centre)는 쇼핑 애호가들을 위한 천국입니다. 이 모던하고 대형 쇼핑 몰은 다양한 브랜드의 상점과 레스토랑, 엔터테인먼트 옵션을 제공하며, 당신의 쇼핑욕을 충족시켜줄 것입니다. 또한 쇼핑 후에는 근처 레스토랑에서 맛있는 음식을 즐길 수 있어 가족과 함께 또는 친구들과 즐기기에 이상적인 장소입니다.

코퀴틀람은 자연과 역사, 쇼핑의 다양한 즐길 거리를 제공하며, 방문객들에게 풍부한 경험을 선사합니다. 이곳을 방문하여 독특한 매력을 만끽하고 훌륭한 여행 추억을 만들어보세요.
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/캐나다/
캐나다의 서부 지역에 위치한 코퀴틀람(Coquitlam)은 매력적인 여행지로서 그 독특한 자연 경관과 풍부한 역사적 유산으로 무장하고 있습니다. 이 블로그 글에서는 코퀴틀람에서 즐길 수 있는 3가지 유명한 여행 장소를 소개하겠습니다.

## 민속 마을: 매혹적인 역사와 문화

&gt; 코퀴틀람 민속 마을(Coquitlam Heritage Village)은 이 지역의 역사와 문화를 탐구하기에 완벽한 장소입니다. 이 마을은 19세기 후반의 생활을 재현한 곳으로, 오래된 건물과 정통한 카나다 민속 마을의 분위기를 즐길 수 있습니다. 민속 마을을 방문하면, 예전 삶의 흔적을 찾고 고유한 공예품을 만드는 기회를 갖게 됩니다. 특히 여름에는 다양한 문화 행사와 축제가 개최되어 가족과 함께 즐기기에 더없이 좋은 장소입니다.

### 멋진 자연 경관: 몬트리올 공원

코퀴틀람의 몬트리올 공원(Mundy Park)은 자연을 사랑하는 이들에게 제격의 목적지입니다. 이 공원은 산책로와 하이킹로, 호수와 숲으로 가득 차 있어, 언제든 자연과 어울릴 수 있는 기회를 제공합니다. 특히 가을에는 황금빛으로 물든 나무들이 공원을 아름답게 꾸며줍니다. 몬트리올 공원에서 자연 속에서의 평화로운 시간을 보내며 스트레스를 풀어보세요.

### 아울렛 쇼핑의 낙원: 코퀴틀람 센터

코퀴틀람 센터(Coquitlam Centre)는 쇼핑 애호가들을 위한 천국입니다. 이 모던하고 대형 쇼핑 몰은 다양한 브랜드의 상점과 레스토랑, 엔터테인먼트 옵션을 제공하며, 당신의 쇼핑욕을 충족시켜줄 것입니다. 또한 쇼핑 후에는 근처 레스토랑에서 맛있는 음식을 즐길 수 있어 가족과 함께 또는 친구들과 즐기기에 이상적인 장소입니다.

코퀴틀람은 자연과 역사, 쇼핑의 다양한 즐길 거리를 제공하며, 방문객들에게 풍부한 경험을 선사합니다. 이곳을 방문하여 독특한 매력을 만끽하고 훌륭한 여행 추억을 만들어보세요.
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/캐나다/- hello

&lt;h2 style=&quot;text-align: justify;&quot;&gt;밴쿠버에서 시애틀로 여행가는 방법&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;
  캐나다 밴쿠버와 미국의 시애틀은 북미 대륙 서쪽 즉 태평양과 접해있는
  도시입니다.
  &lt;span style=&quot;color: red;&quot;&gt;캐나다 밴쿠버에서 미국 시애틀까지는 차로 2시간 정도면 이동할 수 있는
    거리&lt;/span&gt;에 있습니다.
&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;span style=&quot;color: red;&quot;&gt;캐나다 밴쿠버로 여행을 갔다가 미국의 시애틀을 1-2일 정도라도 다녀 온다면
    보다 알찬 여행이 될 것&lt;/span&gt;
  &lt;span style=&quot;color: red;&quot;&gt;밴쿠버에서 시애틀로 여행가는 방법에 대해서 소개&lt;/span&gt;해 보고자 합니다.
&lt;/p&gt;
  &lt;div style=&quot;display: flex; justfy-content: center; align-items: center; width: 100px; height: 100px; background-color: lightblue&quot;&gt;&lt;p&gt;같아&lt;p&gt;&lt;/div&gt;
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/캐나다/- hello

&lt;h2 style=&quot;text-align: justify;&quot;&gt;밴쿠버에서 시애틀로 여행가는 방법&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;
  캐나다 밴쿠버와 미국의 시애틀은 북미 대륙 서쪽 즉 태평양과 접해있는
  도시입니다.
  &lt;span style=&quot;color: red;&quot;&gt;캐나다 밴쿠버에서 미국 시애틀까지는 차로 2시간 정도면 이동할 수 있는
    거리&lt;/span&gt;에 있습니다.
&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;
  &lt;span style=&quot;color: red;&quot;&gt;캐나다 밴쿠버로 여행을 갔다가 미국의 시애틀을 1-2일 정도라도 다녀 온다면
    보다 알찬 여행이 될 것&lt;/span&gt;
  &lt;span style=&quot;color: red;&quot;&gt;밴쿠버에서 시애틀로 여행가는 방법에 대해서 소개&lt;/span&gt;해 보고자 합니다.
&lt;/p&gt;
  &lt;div style=&quot;display: flex; justfy-content: center; align-items: center; width: 100px; height: 100px; background-color: lightblue&quot;&gt;&lt;p&gt;같아&lt;p&gt;&lt;/div&gt;
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/캐나다/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/캐나다/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/캐나다/
캐나다의 서부 지역에 위치한 코퀴틀람(Coquitlam)은 매력적인 여행지로서 그 독특한 자연 경관과 풍부한 역사적 유산으로 무장하고 있습니다. 이 블로그 글에서는 코퀴틀람에서 즐길 수 있는 3가지 유명한 여행 장소를 소개하겠습니다.

## 민속 마을: 매혹적인 역사와 문화

&gt; 코퀴틀람 민속 마을(Coquitlam Heritage Village)은 이 지역의 역사와 문화를 탐구하기에 완벽한 장소입니다. 이 마을은 19세기 후반의 생활을 재현한 곳으로, 오래된 건물과 정통한 카나다 민속 마을의 분위기를 즐길 수 있습니다. 민속 마을을 방문하면, 예전 삶의 흔적을 찾고 고유한 공예품을 만드는 기회를 갖게 됩니다. 특히 여름에는 다양한 문화 행사와 축제가 개최되어 가족과 함께 즐기기에 더없이 좋은 장소입니다.

### 멋진 자연 경관: 몬트리올 공원

코퀴틀람의 몬트리올 공원(Mundy Park)은 자연을 사랑하는 이들에게 제격의 목적지입니다. 이 공원은 산책로와 하이킹로, 호수와 숲으로 가득 차 있어, 언제든 자연과 어울릴 수 있는 기회를 제공합니다. 특히 가을에는 황금빛으로 물든 나무들이 공원을 아름답게 꾸며줍니다. 몬트리올 공원에서 자연 속에서의 평화로운 시간을 보내며 스트레스를 풀어보세요.

### 아울렛 쇼핑의 낙원: 코퀴틀람 센터

코퀴틀람 센터(Coquitlam Centre)는 쇼핑 애호가들을 위한 천국입니다. 이 모던하고 대형 쇼핑 몰은 다양한 브랜드의 상점과 레스토랑, 엔터테인먼트 옵션을 제공하며, 당신의 쇼핑욕을 충족시켜줄 것입니다. 또한 쇼핑 후에는 근처 레스토랑에서 맛있는 음식을 즐길 수 있어 가족과 함께 또는 친구들과 즐기기에 이상적인 장소입니다.

코퀴틀람은 자연과 역사, 쇼핑의 다양한 즐길 거리를 제공하며, 방문객들에게 풍부한 경험을 선사합니다. 이곳을 방문하여 독특한 매력을 만끽하고 훌륭한 여행 추억을 만들어보세요.
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/캐나다/
캐나다의 서부 지역에 위치한 코퀴틀람(Coquitlam)은 매력적인 여행지로서 그 독특한 자연 경관과 풍부한 역사적 유산으로 무장하고 있습니다. 이 블로그 글에서는 코퀴틀람에서 즐길 수 있는 3가지 유명한 여행 장소를 소개하겠습니다.

## 민속 마을: 매혹적인 역사와 문화

&gt; 코퀴틀람 민속 마을(Coquitlam Heritage Village)은 이 지역의 역사와 문화를 탐구하기에 완벽한 장소입니다. 이 마을은 19세기 후반의 생활을 재현한 곳으로, 오래된 건물과 정통한 카나다 민속 마을의 분위기를 즐길 수 있습니다. 민속 마을을 방문하면, 예전 삶의 흔적을 찾고 고유한 공예품을 만드는 기회를 갖게 됩니다. 특히 여름에는 다양한 문화 행사와 축제가 개최되어 가족과 함께 즐기기에 더없이 좋은 장소입니다.

### 멋진 자연 경관: 몬트리올 공원

코퀴틀람의 몬트리올 공원(Mundy Park)은 자연을 사랑하는 이들에게 제격의 목적지입니다. 이 공원은 산책로와 하이킹로, 호수와 숲으로 가득 차 있어, 언제든 자연과 어울릴 수 있는 기회를 제공합니다. 특히 가을에는 황금빛으로 물든 나무들이 공원을 아름답게 꾸며줍니다. 몬트리올 공원에서 자연 속에서의 평화로운 시간을 보내며 스트레스를 풀어보세요.

### 아울렛 쇼핑의 낙원: 코퀴틀람 센터

코퀴틀람 센터(Coquitlam Centre)는 쇼핑 애호가들을 위한 천국입니다. 이 모던하고 대형 쇼핑 몰은 다양한 브랜드의 상점과 레스토랑, 엔터테인먼트 옵션을 제공하며, 당신의 쇼핑욕을 충족시켜줄 것입니다. 또한 쇼핑 후에는 근처 레스토랑에서 맛있는 음식을 즐길 수 있어 가족과 함께 또는 친구들과 즐기기에 이상적인 장소입니다.

코퀴틀람은 자연과 역사, 쇼핑의 다양한 즐길 거리를 제공하며, 방문객들에게 풍부한 경험을 선사합니다. 이곳을 방문하여 독특한 매력을 만끽하고 훌륭한 여행 추억을 만들어보세요.
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/유럽/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/유럽/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
title: &quot;밴쿠버 현지인들이 추천하는 유명하지 않지만 꼭 가볼만한 여행지 1, 2, 3&quot;
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/나를찾는세계여행/
After watching [High Score](https://www.youtube.com/watch?v=B4jopG1wX88) on Netflix, I was suddenly inspired to develop a retro-style game. I think it was a combination of the aesthetics and nostalgia that motivated me.

It turned out to be a pretty fun experience, and something I&apos;d recommend as a weekend project to any developer. With tools like [PICO-8](https://www.lexaloffle.com/pico-8.php) (a NES-like virtual console), it&apos;s really easy to get started — even if you&apos;re a beginner to programming.

In this post, I&apos;ll be discussing why you should try your hand at retro-game development, and explain some of the technical limitations you&apos;ll be facing.

## Why you should build a retro game

For new programmers especially, a retro game project is:

- A great way to learn programming.
- An excellent addition to your portfolio.
- An effective way of prototyping new ideas (see [CELESTE](&lt;https://en.wikipedia.org/wiki/Celeste_(video_game)&gt;)).

The constraints of using &quot;retro technology&quot; creates a harsh environment to develop in.

But at the same time, you won&apos;t have to worry about learning a hundred different libraries, monetization funnels, or how to get it running on four different platforms.

Essentially, you get to focus purely on the technical and creative problems of the game itself.

## What is PICO-8?

From the [PICO-8](https://www.lexaloffle.com/pico-8.php) official website:

&gt; PICO-8 is a [fantasy console](https://www.lexaloffle.com/pico-8.php?page=faq) for making, sharing and playing tiny games and other computer programs. It _feels_ like a regular console, but runs on Windows / Mac / Linux.

Basically, it&apos;s a program that pretends to be a console. It costs $15 to buy. You can use it to both play _and_ create your games. You can, of course, use an external editor (like [VSCode](https://code.visualstudio.com/)) with it as well.

You write code for it in [Lua](https://www.lua.org/) (if you haven&apos;t used that language before, don&apos;t worry — you&apos;ll pick it up in a day). The art and sound can be created directly in the console&apos;s editor, to be used in your game.


Finally, you can even export them to HTML so your friends (and recruiters?) can check it out from their phone.

I&apos;d say the learning curve from zero to [Pong](https://en.wikipedia.org/wiki/Pong) is just a matter of hours (or days, at most).

The best way to get started is to follow the [official manual](https://www.lexaloffle.com/pico-8.php?page=manual), or [watch a video](https://www.youtube.com/watch?v=K5RXMuH54iw).

## PICO-8&apos;s technical specs

You only have a palette of `16` colours, your canvas is `128` pixels wide and your whole program needs to fit within `65536` characters. There&apos;s almost no framework library to learn — aside from a handful of helper functions that would probably fit on a [napkin if written out](https://www.lexaloffle.com/bbs/files/16585/PICO-8_Cheat-Sheet_0-9-2.png).

Here&apos;s a couple of snippets of PICO-8 code to give you an idea of what development looks like.

### Game Loop

The first thing to note is that the game has a special function called `_update()` which is invoked at 30 FPS. This will probably be the main driving force behind your game logic. In this snippet, we create a variable `f`, which increases by `1` each update — effectively counting the number of frames since the game loaded.

```lua
-- this is a global variable
f = 0

-- this is a special function that pico-8 invokes 30 times per second.
function _update()
    f += 1
end
```

### Rendering a sprite

You can draw sprites (images) with the pixel art editor directly in the console. In PICO-8, you have 16 colors to choose from.


Each sprite has an ID, which can then be used to render it on the screen at the x and y position you specify. Another special in-built function of PICO-8 is `_draw()`, which also executes at 30 FPS, but is guaranteed to execute after `_update()`.

```lua
x = 64
y = 64

function _draw()
  cls(0) -- clear the screen and set it to color 0 (black).
  spr(1, x, y) -- draw the sprite ID 1 at (x, y)
end
```

This will draw the above sprite (ID 1) at (64, 64) at the centre of the screen.

### Capturing player input

PICO-8 detects user input via the `btn(k)` function, which returns true with the button with ID `k` is being pressed by the player. `k` ranges from 0 to 6 for a single player, and each number represents either the arrow keys, or two arbitrary game-play buttons like the `A` and `B` on a NES controller.

Adding this snippet to the rendering one above will allow us to move the character.

```lua
function _update()
  if btn(0) then x -= 2 end -- move left
  if btn(1) then x -+ 2 end -- move right
end
```

## Ideas to get started

So, if you like the sound of creating your own retro-game from scratch — either to pad your CV with an extra project, or just to learn and have fun, head over to [PICO-8](https://www.lexaloffle.com/pico-8.php) to get started! I recommend first just following the [manual](https://www.lexaloffle.com/pico-8.php?page=manual).

Once you&apos;ve nailed the basics, here are some classic titles you could try to implement (and possibly extend):

- [Pong](https://en.wikipedia.org/wiki/Pong) (1972)
- [Space Invaders](https://en.wikipedia.org/wiki/Space_Invaders) (1978)
- [Pac-Man](https://en.wikipedia.org/wiki/Pac-Man) (1980)
- [Snake](&lt;https://en.wikipedia.org/wiki/Snake_(video_game_genre)&gt;) (1997)

Or if you&apos;re feeling more ambitious, you could even try to implement a [Mario](https://en.wikipedia.org/wiki/Super_Mario_Bros.) clone!
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/나를찾는세계여행/
After watching [High Score](https://www.youtube.com/watch?v=B4jopG1wX88) on Netflix, I was suddenly inspired to develop a retro-style game. I think it was a combination of the aesthetics and nostalgia that motivated me.

It turned out to be a pretty fun experience, and something I&apos;d recommend as a weekend project to any developer. With tools like [PICO-8](https://www.lexaloffle.com/pico-8.php) (a NES-like virtual console), it&apos;s really easy to get started — even if you&apos;re a beginner to programming.

In this post, I&apos;ll be discussing why you should try your hand at retro-game development, and explain some of the technical limitations you&apos;ll be facing.

## Why you should build a retro game

For new programmers especially, a retro game project is:

- A great way to learn programming.
- An excellent addition to your portfolio.
- An effective way of prototyping new ideas (see [CELESTE](&lt;https://en.wikipedia.org/wiki/Celeste_(video_game)&gt;)).

The constraints of using &quot;retro technology&quot; creates a harsh environment to develop in.

But at the same time, you won&apos;t have to worry about learning a hundred different libraries, monetization funnels, or how to get it running on four different platforms.

Essentially, you get to focus purely on the technical and creative problems of the game itself.

## What is PICO-8?

From the [PICO-8](https://www.lexaloffle.com/pico-8.php) official website:

&gt; PICO-8 is a [fantasy console](https://www.lexaloffle.com/pico-8.php?page=faq) for making, sharing and playing tiny games and other computer programs. It _feels_ like a regular console, but runs on Windows / Mac / Linux.

Basically, it&apos;s a program that pretends to be a console. It costs $15 to buy. You can use it to both play _and_ create your games. You can, of course, use an external editor (like [VSCode](https://code.visualstudio.com/)) with it as well.

You write code for it in [Lua](https://www.lua.org/) (if you haven&apos;t used that language before, don&apos;t worry — you&apos;ll pick it up in a day). The art and sound can be created directly in the console&apos;s editor, to be used in your game.


Finally, you can even export them to HTML so your friends (and recruiters?) can check it out from their phone.

I&apos;d say the learning curve from zero to [Pong](https://en.wikipedia.org/wiki/Pong) is just a matter of hours (or days, at most).

The best way to get started is to follow the [official manual](https://www.lexaloffle.com/pico-8.php?page=manual), or [watch a video](https://www.youtube.com/watch?v=K5RXMuH54iw).

## PICO-8&apos;s technical specs

You only have a palette of `16` colours, your canvas is `128` pixels wide and your whole program needs to fit within `65536` characters. There&apos;s almost no framework library to learn — aside from a handful of helper functions that would probably fit on a [napkin if written out](https://www.lexaloffle.com/bbs/files/16585/PICO-8_Cheat-Sheet_0-9-2.png).

Here&apos;s a couple of snippets of PICO-8 code to give you an idea of what development looks like.

### Game Loop

The first thing to note is that the game has a special function called `_update()` which is invoked at 30 FPS. This will probably be the main driving force behind your game logic. In this snippet, we create a variable `f`, which increases by `1` each update — effectively counting the number of frames since the game loaded.

```lua
-- this is a global variable
f = 0

-- this is a special function that pico-8 invokes 30 times per second.
function _update()
    f += 1
end
```

### Rendering a sprite

You can draw sprites (images) with the pixel art editor directly in the console. In PICO-8, you have 16 colors to choose from.


Each sprite has an ID, which can then be used to render it on the screen at the x and y position you specify. Another special in-built function of PICO-8 is `_draw()`, which also executes at 30 FPS, but is guaranteed to execute after `_update()`.

```lua
x = 64
y = 64

function _draw()
  cls(0) -- clear the screen and set it to color 0 (black).
  spr(1, x, y) -- draw the sprite ID 1 at (x, y)
end
```

This will draw the above sprite (ID 1) at (64, 64) at the centre of the screen.

### Capturing player input

PICO-8 detects user input via the `btn(k)` function, which returns true with the button with ID `k` is being pressed by the player. `k` ranges from 0 to 6 for a single player, and each number represents either the arrow keys, or two arbitrary game-play buttons like the `A` and `B` on a NES controller.

Adding this snippet to the rendering one above will allow us to move the character.

```lua
function _update()
  if btn(0) then x -= 2 end -- move left
  if btn(1) then x -+ 2 end -- move right
end
```

## Ideas to get started

So, if you like the sound of creating your own retro-game from scratch — either to pad your CV with an extra project, or just to learn and have fun, head over to [PICO-8](https://www.lexaloffle.com/pico-8.php) to get started! I recommend first just following the [manual](https://www.lexaloffle.com/pico-8.php?page=manual).

Once you&apos;ve nailed the basics, here are some classic titles you could try to implement (and possibly extend):

- [Pong](https://en.wikipedia.org/wiki/Pong) (1972)
- [Space Invaders](https://en.wikipedia.org/wiki/Space_Invaders) (1978)
- [Pac-Man](https://en.wikipedia.org/wiki/Pac-Man) (1980)
- [Snake](&lt;https://en.wikipedia.org/wiki/Snake_(video_game_genre)&gt;) (1997)

Or if you&apos;re feeling more ambitious, you could even try to implement a [Mario](https://en.wikipedia.org/wiki/Super_Mario_Bros.) clone!
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/나를찾는세계여행/
I was recently granted access to the [OpenAI GPT-3 Beta](https://beta.openai.com/), a very powerful language model that can be used to do all sorts of magic like chat bot generation, article summary, and a [lot more cool stuff](https://beta.openai.com/examples).

But the application that really excited me was creative writing (stuff like SEO generation is cool and all, but a also a bit dry for my taste).

I had previously seen [AI Dungeon](https://play.aidungeon.io/) use GPT to create an interactive text adventure game (try it, it&apos;s fun!) and that got me curious about what else the AI was capable of — especially when elements of both _creativity_ and _structure_ were involved.

I decided to test it against poetry and story generation, and this is the resulting write-up of those experiments.

## What is GPT-3?

[GPT-3](https://arxiv.org/abs/2005.14165) is a language model developed by [OpenAI](https://beta.openai.com/). To the average developer (like me), it&apos;s basically a magical black-box that is extremely powerful at natural language use-cases.

It was trained on an estimated **45 TB** of text data (pretty much anything that is publicly available on the internet)!

We can literally ask it to do anything. For example, if I ask for steps to bake a cake it gives me:

```
1. Preheat oven to 350°F.
2. Grease and flour a 9-inch round cake pan.
3. Stir cake mix, oil, eggs, and water in a large bowl with a spoon until blended.
4. Pour batter into prepared pan.
```

Alternatively, I can provide it with an example of what I want. Such as:

```
[15 mins] Walk or jog lightlyy to warm up.
[10 mins] 3 sets of Squats
```

And it will understand that we&apos;re writing a work-out routine, and continue in that style — responding with something like this:

```
[10 mins] 3 sets of Push ups (use the bench/steps if you can&apos;t do regular ones)
[10 mins] 3 sets of Lunges
[10 mins] 3 sets of Sit ups
[10 mins] 3 sets of Tricep dips
[10 mins] 3 sets of
```

It can also do some pretty zany stuff, like translating from English to emoji.

```
I love pizza and beer.
😀❤️🍕🍺

I flew to Japan and ate some Sushi.
✈️🇯🇵😋 🍣

I was snowboarding in France.
🏂❄️🇫🇷
```

So as you can see, there&apos;s just endless amount of ways you can interact with the AI.

It&apos;s up to us to experiment with it and see how it can be useful for any particular problem. Let&apos;s give it a go!

## 💡 Method

Today, I want to see if this AI is able to understand and generate poetry. Why poetry? Because I think it&apos;s a relatively simple example, and has three distinct dimensions that we can easily assess it on:

- Tone
- Content
- Structure

OpenAI lets customers interact with GPT-3 via an API, so that&apos;s how I&apos;ll be using it as well.

I&apos;ll be providing both direct requests and examples (with increasing complexity), and let the AI come up with **20 responses** for each prompt.

Additionally, for my example prompts, I&apos;ll avoid using existing text—the AI may have already seen it in the training data and that might skew the results.

I&apos;ll then talk about the best samples in each batch and anything I find interesting about them.

Also I&apos;ve pushed the [full set of results on GitHub](https://github.com/pixegami/gpt-3-poetry-results) if you wanted to check out the rest of the samples.

## 🧪 Results

### ✍ Short poem

As a baseline, I want to know how much the AI understands about the tone, structure and content of a &apos;poem.&apos;

```
[Prompt]
Write a short poem.

[Sample AI Response]
Snow is falling,

silently,

the ground a white blanket.
Heroes dream in peace,
where they sleep.
```

It&apos;s a pretty good start! It&apos;s structured but it doesn&apos;t rhyme. The language and story also have a &apos;poetic&apos; feel to it. Not bad.

Amongst the other 20 samples were also hilarious rubbish like this one 🤡 :

```
[Sample AI Response]
Life is like a beach
Where we take our coconut and whack it
or chew on it

There are also other beaches
Where we can drink some sand and ruminate
```

Not quite hitting the mark, but still pretty interesting.

### ✍ Short poem with theme

Next, I wanted to extend the prompt with some theme, just to see how it is able to assimilate that into its response.

I picked a theme that isn&apos;t typically associated with poetry: **Space Exploration** (also because I&apos;ve been watching a lot of old-school sci-fi stuff recently).

```
[Prompt]
Write a short poem about space exploration.

[Sample AI Response]
I hope the stars align
For I dream and explore
Beyond what we see,
With the most amazing views
```

It&apos;s definitely found a way to put the space theme in there — not too unnaturally either, because it still links it to &apos;emotional&apos; concepts like &apos;dream&apos;, &apos;hope&apos; and &apos;explore.&apos;

### ✍ Short poem with 2x themes

Now I know it can handle one theme, let&apos;s add another one to the mix and see what happens. Something _not_ commonly associated with either poetry nor space (we want to challenge the AI right?) — how about...

```
[Prompt]
Write a short poem about space exploration and parkour.

[Sample AI Response]
Taking the stars and reaching for the moon
Afraid to look down
She jumps, leaps, and lands
```

Not bad. Here&apos;s another sample.

```
[Sample AI Response]
Parkour through the cosmos
jump to the moon and land with a moonwalk
push off from the Earth, do a headspin
jump to Mars, make it look easy
```

I&apos;m impressed that instead of just shoe-horning in the parkour theme, it&apos;s found words and phrases that have a natural connection with the space theme — like &apos;leap&apos; and &apos;moonwalk.&apos;

It was at this point that the [vector aspect](https://jalammar.github.io/illustrated-gpt2/) of the model started to really click for me.

It&apos;s as if it found the [cross-product](https://en.wikipedia.org/wiki/Cross_product) between the &apos;space&apos; vector and the &apos;parkour&apos; vector (this is a gross over-simplification), and applied that to the poem.

### ✍ Children&apos;s Story (Rhyming Verse)

My next task was to try something a bit more directed. This time I will give it a concrete example (with a tone, structure and story) to continue with.

To keep it (relatively) easy for the AI, I started with a rhyming verse, like something from a Dr Seuss book:

```
[Prompt]
It&apos;s a sunny day.
And Milky wants to play!
He looks for his ball,
but it&apos;s not in the hall.
```

&gt; By the way Milky&apos;s the name of my dog, and this literally is the story of his life every morning.

Some of the results from this were super interesting. My favorite one is:

```
[Sample AI Response]
It&apos;s not on the stairs.
It&apos;s not in the yard.
Maybe it&apos;s in the attic,
somewhere really dark.
```

This one nails the tone — notice that it repeats the &quot;It&apos;s not at \_\_\_&quot; three times? That&apos;s just like what a children&apos;s book would do!

It also introduces some progression and drama into the story. Now our character has an idea where the ball is (the attic), but there is a sense of danger and risk in the way (somewhere really dark).

Structurally, &quot;yard&quot; and &quot;dark&quot; is also partial rhyme, but I think that was probably a fluke (out of the 20 samples, maybe only 2-3 managed to rhyme).

Still, I was really impressed with this result. Here&apos;s something else that I observed as well:

```
[Sample AI Response]
Then in through the window
stumbles a dog with a bark.
It&apos;s Billy, his brother.
```

_Dog!_ It figured out that Milky in this story is a dog, even though that was never explicitly mentioned in the prompt. It might be a small detail, but I was low-key amazed by that.

### ✍ Fantasy Fiction

Next let&apos;s test GPT-3&apos;s ability for creative story-telling as well. Here&apos;s a rhyming story with a bit of drama, written in a high-fantasy style:

```
[Prompt]
A mysterious curse sweeps the land,
and into townsfolk&apos;s hearts expand.
One broken link and night shall fall,
eternal sleep will enslave them all.

But there is hope
```

I ended the prompt with `But there is hope` because I was interested to see if the AI can progress (and negate!) the verse before it, rather than extend the example (which we already know it can do).

The results for this prompt were probably the most entertaining for me to read. My favorite:

```
[Sample AI Response]
a prophecy is spoken,
Which tells of one who will restore the sun.
She comes with a prince and shall break the spell,
and together save the land from hell.
```

So many things I love about this response.

- It introduces a _heroine_ to the story (+1 for gender diversity!)
- It writes a sensible continuation of the prompt.
- It even manages rhyming (between &apos;one/sun&apos;, and &apos;spell/hell&apos;).

A lot of the other samples were also quite interesting (check them out [here](https://github.com/pixegami/gpt-3-poetry-results)) and full of creative ideas.

### ✍ Hacker Rap

And finally just for a bit of fun, let&apos;s see what it can do with hacker rap 🤣 :

```
[Prompt]
When I&apos;m tappin&apos; I&apos;m trapped in the screen
I escape when the codebase is clean
```

I loved it&apos;s work here as well. It did a good job picking up on both structure (rhyme) and content.

```
[Sample AI Response]
I can write code, I can code all night
You are my code and I am your light
We&apos;re in this together from dusk &apos;til dawn.
We got the skill to make things run
```

I also found this particular choice of words interesting:

```
The refactoring was a success, great!
And I will not commit the same crime
So I&apos;m testin&apos;, testin&apos;, testin, testin&apos; again
Just when I&apos;ve seen enough, it happens again
```

&quot;Commit the same crime&quot; — does it know the significance of the word _commit_ for developers? 🤯

## Wrap Up

That&apos;s pretty much all I had to share this time around. GPT-3 has definitely impressed me with it&apos;s capabilities, and now I have a stronger understanding how this power can be wielded.

In a batch of 20 samples, not all of them are great—but the good ones are sometimes _really_ good.

If I wanted to use it in this way, I&apos;d need a process that allows a human (me) to select and use the best samples.

I hope this was interesting! I also covered everything here in a video as well (which I geared towards less technical viewers) which you can check out [here](https://www.youtube.com/watch?v=r3zKcL0iGeA&amp;t=47s).

Thanks for reading!
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/나를찾는세계여행/
I was recently granted access to the [OpenAI GPT-3 Beta](https://beta.openai.com/), a very powerful language model that can be used to do all sorts of magic like chat bot generation, article summary, and a [lot more cool stuff](https://beta.openai.com/examples).

But the application that really excited me was creative writing (stuff like SEO generation is cool and all, but a also a bit dry for my taste).

I had previously seen [AI Dungeon](https://play.aidungeon.io/) use GPT to create an interactive text adventure game (try it, it&apos;s fun!) and that got me curious about what else the AI was capable of — especially when elements of both _creativity_ and _structure_ were involved.

I decided to test it against poetry and story generation, and this is the resulting write-up of those experiments.

## What is GPT-3?

[GPT-3](https://arxiv.org/abs/2005.14165) is a language model developed by [OpenAI](https://beta.openai.com/). To the average developer (like me), it&apos;s basically a magical black-box that is extremely powerful at natural language use-cases.

It was trained on an estimated **45 TB** of text data (pretty much anything that is publicly available on the internet)!

We can literally ask it to do anything. For example, if I ask for steps to bake a cake it gives me:

```
1. Preheat oven to 350°F.
2. Grease and flour a 9-inch round cake pan.
3. Stir cake mix, oil, eggs, and water in a large bowl with a spoon until blended.
4. Pour batter into prepared pan.
```

Alternatively, I can provide it with an example of what I want. Such as:

```
[15 mins] Walk or jog lightlyy to warm up.
[10 mins] 3 sets of Squats
```

And it will understand that we&apos;re writing a work-out routine, and continue in that style — responding with something like this:

```
[10 mins] 3 sets of Push ups (use the bench/steps if you can&apos;t do regular ones)
[10 mins] 3 sets of Lunges
[10 mins] 3 sets of Sit ups
[10 mins] 3 sets of Tricep dips
[10 mins] 3 sets of
```

It can also do some pretty zany stuff, like translating from English to emoji.

```
I love pizza and beer.
😀❤️🍕🍺

I flew to Japan and ate some Sushi.
✈️🇯🇵😋 🍣

I was snowboarding in France.
🏂❄️🇫🇷
```

So as you can see, there&apos;s just endless amount of ways you can interact with the AI.

It&apos;s up to us to experiment with it and see how it can be useful for any particular problem. Let&apos;s give it a go!

## 💡 Method

Today, I want to see if this AI is able to understand and generate poetry. Why poetry? Because I think it&apos;s a relatively simple example, and has three distinct dimensions that we can easily assess it on:

- Tone
- Content
- Structure

OpenAI lets customers interact with GPT-3 via an API, so that&apos;s how I&apos;ll be using it as well.

I&apos;ll be providing both direct requests and examples (with increasing complexity), and let the AI come up with **20 responses** for each prompt.

Additionally, for my example prompts, I&apos;ll avoid using existing text—the AI may have already seen it in the training data and that might skew the results.

I&apos;ll then talk about the best samples in each batch and anything I find interesting about them.

Also I&apos;ve pushed the [full set of results on GitHub](https://github.com/pixegami/gpt-3-poetry-results) if you wanted to check out the rest of the samples.

## 🧪 Results

### ✍ Short poem

As a baseline, I want to know how much the AI understands about the tone, structure and content of a &apos;poem.&apos;

```
[Prompt]
Write a short poem.

[Sample AI Response]
Snow is falling,

silently,

the ground a white blanket.
Heroes dream in peace,
where they sleep.
```

It&apos;s a pretty good start! It&apos;s structured but it doesn&apos;t rhyme. The language and story also have a &apos;poetic&apos; feel to it. Not bad.

Amongst the other 20 samples were also hilarious rubbish like this one 🤡 :

```
[Sample AI Response]
Life is like a beach
Where we take our coconut and whack it
or chew on it

There are also other beaches
Where we can drink some sand and ruminate
```

Not quite hitting the mark, but still pretty interesting.

### ✍ Short poem with theme

Next, I wanted to extend the prompt with some theme, just to see how it is able to assimilate that into its response.

I picked a theme that isn&apos;t typically associated with poetry: **Space Exploration** (also because I&apos;ve been watching a lot of old-school sci-fi stuff recently).

```
[Prompt]
Write a short poem about space exploration.

[Sample AI Response]
I hope the stars align
For I dream and explore
Beyond what we see,
With the most amazing views
```

It&apos;s definitely found a way to put the space theme in there — not too unnaturally either, because it still links it to &apos;emotional&apos; concepts like &apos;dream&apos;, &apos;hope&apos; and &apos;explore.&apos;

### ✍ Short poem with 2x themes

Now I know it can handle one theme, let&apos;s add another one to the mix and see what happens. Something _not_ commonly associated with either poetry nor space (we want to challenge the AI right?) — how about...

```
[Prompt]
Write a short poem about space exploration and parkour.

[Sample AI Response]
Taking the stars and reaching for the moon
Afraid to look down
She jumps, leaps, and lands
```

Not bad. Here&apos;s another sample.

```
[Sample AI Response]
Parkour through the cosmos
jump to the moon and land with a moonwalk
push off from the Earth, do a headspin
jump to Mars, make it look easy
```

I&apos;m impressed that instead of just shoe-horning in the parkour theme, it&apos;s found words and phrases that have a natural connection with the space theme — like &apos;leap&apos; and &apos;moonwalk.&apos;

It was at this point that the [vector aspect](https://jalammar.github.io/illustrated-gpt2/) of the model started to really click for me.

It&apos;s as if it found the [cross-product](https://en.wikipedia.org/wiki/Cross_product) between the &apos;space&apos; vector and the &apos;parkour&apos; vector (this is a gross over-simplification), and applied that to the poem.

### ✍ Children&apos;s Story (Rhyming Verse)

My next task was to try something a bit more directed. This time I will give it a concrete example (with a tone, structure and story) to continue with.

To keep it (relatively) easy for the AI, I started with a rhyming verse, like something from a Dr Seuss book:

```
[Prompt]
It&apos;s a sunny day.
And Milky wants to play!
He looks for his ball,
but it&apos;s not in the hall.
```

&gt; By the way Milky&apos;s the name of my dog, and this literally is the story of his life every morning.

Some of the results from this were super interesting. My favorite one is:

```
[Sample AI Response]
It&apos;s not on the stairs.
It&apos;s not in the yard.
Maybe it&apos;s in the attic,
somewhere really dark.
```

This one nails the tone — notice that it repeats the &quot;It&apos;s not at \_\_\_&quot; three times? That&apos;s just like what a children&apos;s book would do!

It also introduces some progression and drama into the story. Now our character has an idea where the ball is (the attic), but there is a sense of danger and risk in the way (somewhere really dark).

Structurally, &quot;yard&quot; and &quot;dark&quot; is also partial rhyme, but I think that was probably a fluke (out of the 20 samples, maybe only 2-3 managed to rhyme).

Still, I was really impressed with this result. Here&apos;s something else that I observed as well:

```
[Sample AI Response]
Then in through the window
stumbles a dog with a bark.
It&apos;s Billy, his brother.
```

_Dog!_ It figured out that Milky in this story is a dog, even though that was never explicitly mentioned in the prompt. It might be a small detail, but I was low-key amazed by that.

### ✍ Fantasy Fiction

Next let&apos;s test GPT-3&apos;s ability for creative story-telling as well. Here&apos;s a rhyming story with a bit of drama, written in a high-fantasy style:

```
[Prompt]
A mysterious curse sweeps the land,
and into townsfolk&apos;s hearts expand.
One broken link and night shall fall,
eternal sleep will enslave them all.

But there is hope
```

I ended the prompt with `But there is hope` because I was interested to see if the AI can progress (and negate!) the verse before it, rather than extend the example (which we already know it can do).

The results for this prompt were probably the most entertaining for me to read. My favorite:

```
[Sample AI Response]
a prophecy is spoken,
Which tells of one who will restore the sun.
She comes with a prince and shall break the spell,
and together save the land from hell.
```

So many things I love about this response.

- It introduces a _heroine_ to the story (+1 for gender diversity!)
- It writes a sensible continuation of the prompt.
- It even manages rhyming (between &apos;one/sun&apos;, and &apos;spell/hell&apos;).

A lot of the other samples were also quite interesting (check them out [here](https://github.com/pixegami/gpt-3-poetry-results)) and full of creative ideas.

### ✍ Hacker Rap

And finally just for a bit of fun, let&apos;s see what it can do with hacker rap 🤣 :

```
[Prompt]
When I&apos;m tappin&apos; I&apos;m trapped in the screen
I escape when the codebase is clean
```

I loved it&apos;s work here as well. It did a good job picking up on both structure (rhyme) and content.

```
[Sample AI Response]
I can write code, I can code all night
You are my code and I am your light
We&apos;re in this together from dusk &apos;til dawn.
We got the skill to make things run
```

I also found this particular choice of words interesting:

```
The refactoring was a success, great!
And I will not commit the same crime
So I&apos;m testin&apos;, testin&apos;, testin, testin&apos; again
Just when I&apos;ve seen enough, it happens again
```

&quot;Commit the same crime&quot; — does it know the significance of the word _commit_ for developers? 🤯

## Wrap Up

That&apos;s pretty much all I had to share this time around. GPT-3 has definitely impressed me with it&apos;s capabilities, and now I have a stronger understanding how this power can be wielded.

In a batch of 20 samples, not all of them are great—but the good ones are sometimes _really_ good.

If I wanted to use it in this way, I&apos;d need a process that allows a human (me) to select and use the best samples.

I hope this was interesting! I also covered everything here in a video as well (which I geared towards less technical viewers) which you can check out [here](https://www.youtube.com/watch?v=r3zKcL0iGeA&amp;t=47s).

Thanks for reading!
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/나를찾는세계여행/
In a [previous post](./retro-games-with-pico-8) I talked about how making retro 8-bit games is a great way for fledgling developers to learn new things whilst expanding their portfolio.

I recently gave it a go myself, making a small RPG combat game called &quot;Wolfhunter&quot;.

I spent two weekends on the project, which—despite my prior experience in games development—still managed to surprise me with some interesting challenges.


## Concept

Wolfhunter is an 8-bit RPG where you play as a hunter facing off against a werewolf, in a Pokemon-like combat sequence.

You have magic spells and single-use items at your disposal, but the wolf is very powerful. The only way to kill it is to weaken it with your attacks, then finish it off with a silver-knife (which you only have one shot at).

## Gameplay


I set out to make a game loop that felt similar to the combat in [Pokemon Red/Blue](https://en.wikipedia.org/wiki/Pok%C3%A9mon_Red_and_Blue), which was the most popular title on the [original Nintendo Gameboy](https://en.wikipedia.org/wiki/Game_Boy).

The characters stand opposite each other, and take turns to fight. There&apos;s a bunch of other mechanics too, like strengths/weaknesses, status effects, and switching characters. Here&apos;s a scene from it:


For Wolfhunter, I copied the scene layout, the turn based fighting, and the status effects. I didn&apos;t have a chance to implement other aspects of Pokemon — so instead I doubled down on the mechanics I did implement.

### Core Mechanics

The units take turns to fight. The game ends when one of the character&apos;s HP is reduced to 0.

Each turn, the player has two basic abilities that can be used for free.

| Ability | Effect                         |
| ------- | ------------------------------ |
| Attack  | Deal 15 damage.                |
| Defend  | Blocks 15 damage for one turn. |

### Magic

The basic abilities were good to establish some baseline gameplay, but not enough to be interesting. I also added &apos;&quot;magic&quot;, which costs **1 mana** to use (you start with **5 mana**, and cannot cast spells if you run out).

| Spell    | Effect                                                                     |
| -------- | -------------------------------------------------------------------------- |
| Fireball | Deals 40 damage. Ignores defence.                                          |
| Spark    | Deals 12 damage and **blinds** the enemy, causing the next attack to miss. |
| Heal     | Recovers 35 HP and clears **bleed** effects.                               |

Magic is more powerful than just attacking or defending, but are in limited supply, and designed to _interact/react_ against enemy abilities.

### Items

Items are even more powerful than magic, but only have **1 use** per fight.

| Item         | Effect                                                    |
| ------------ | --------------------------------------------------------- |
| Crossbow     | Deals 25% of the enemy&apos;s HP as damage.                    |
| Elixir       | Recover 5 mana.                                           |
| Silver Knife | Deals 5 damage, but is the only way to kill the werewolf. |

### Enemy

Finally, to tie the gameplay together, the enemy must interact well with the player&apos;s abilities, and provide some kind of strategic challenge.

| Ability       | Effect                                                                               |
| ------------- | ------------------------------------------------------------------------------------ |
| Ravage        | Deals 8 damage and causes **bleeding**.                                              |
| Strong Defend | Blocks 20 damage for one turn.                                                       |
| Dark Flight   | Skips a turn, then deals 64 damage.                                                  |
| Raging Strike | Deals 18 damage but becomes **vulnerable** after, taking double damage for one turn. |

These enemy is strong, but the player has ways to mitigate each of its threats. Pretty much the point of the entire game here is figuring out what move to use next.

## Event Sequence

From an implementation standpoint, the most important part of the game is the &quot;event sequence&quot;. This system will control how the game flows, and sets the framework for everything else to follow.

I define an &quot;event&quot; as **something atomic that happens in the game**. It usually displays some description to the player, and requires the player to acknowledge. Examples:

- A character uses an ability.
- Damage is taken.
- Character is defeated.
- Turns switched.
- Status effect is applied.

This is pretty much the back-bone of a turn-based system. Everything in the game—from the menu selection, to mana consumption, to damage/block resolution—can be modelled with events.

And in this game, events are always sequential and happening in order. But new events can be added in the middle of the sequence—for example if an attack is blocked, we need a &quot;block&quot; event to resolve.

This is pretty much a [linked list](https://en.wikipedia.org/wiki/Linked_list), and that&apos;s how I implemented it. The events are the nodes. Additionally, when each event resolves, it can modify the nodes directly ahead of it, or at the tail of the list.

### Sequence

This is pretty much a linked list implementation. We start it off with an `new_info_event` (display some text to the player) that says &quot;it&apos;s your turn to move.&quot;

The `head` of the sequence is the event we are currently processing in the game.

```lua
function new_sequence()

  local first_event = new_info_event(&quot;it&apos;s your turn to move!&quot;)
  local sequence = {
    head = first_event,
    tail = first_event
  }

  -- move sequence cursor to the next event.
  sequence.next = function(this)
    this.head = this.head.next
  end

  -- add an event to the end of the sequence.
  sequence.add = function(this, e)
    this.tail.next = e
    this.tail = e
  end

  -- add an event after the head of the sequence.
  sequence.insert = function(this, e)
    e:get_tail().next = this.head.next
    this.head.next = e
  end

  return sequence
end
```

### Damage Event

Here&apos;s an example of an event that causes damage to a unit (character). The `action` is an anonymous function that executes _once_, when the event is processed.

This includes playing sound effects, animations, and actually modifying the HP values. In this case, if at run-time the damage causes a unit to die, then a `new_end_combat_event` is added to the sequence, along with a `new_info_event` to display some informative text to the player.

```lua
function new_damage_event(unit, value)

  local desc = unit.name..&quot; takes &quot;..value..&quot; damage!&quot;
  local dmg_event = new_event(&quot;damage&quot;, desc, true)

  dmg_event.action = function(this)
    unit.hp -= value
    unit:animate(new_hit_animation())
    sfx(3)
    if unit.hp &lt;= 0 then
      unit.hp = 0
      sequence:insert(new_end_combat_event(unit.name))
      sequence:insert(new_info_event(&quot;the fight has ended!&quot;))
    end
  end

  return dmg_event
end
```

### Sequence Control

In the `_update()` function of the game, we process the `head` event and show the appropriate information. Special event types, like `menu` will control what UI is shown.

Some events (`auto`) will be processed immediately—but most will require interaction from the player to progress.

```lua
-- update the menu if we are showing one.
if event.type == &quot;menu&quot; then combat_menu:update() end
if event.type == &quot;magic&quot; then magic_menu:update() end
if event.type == &quot;items&quot; then items_menu:update() end

-- each time we press x, the sequence progresses.
if btnp(5) or event.type == &quot;auto&quot; then sequence:next() end
if btnp(5) and (event.type == &quot;info&quot; or event.type == &quot;damage&quot;) then sfx(1) end
```

## Items and Magic

I think items and magic are an interesting one. Instead of being their own event types, I think it was a good chance to apply the [decorator pattern](https://en.wikipedia.org/wiki/Decorator_pattern).

That&apos;s because items and magic can be thought of as regular abilities—wrapped with some extra conditions!

Namely—we want to wrap the concept of **mana consumption** onto magic, and **single-use** onto items. Aside from those things, they still do anything else an ability can do. So what I&apos;m after here, is a function that can take in an **ability** (an arbitrary event), and turn it into a magic spell, or an item.

Consider we have this &apos;heal&apos; event. As is, this will recover 35 HP, and doesn&apos;t have any other cost or conditions associated with it.

```lua
function new_heal_event(name, unit, value)
 -- restore 35 hp!
end
```

Now, I have a decorator function, which accepts an `event`, and adds mana usage to it.

```lua
-- wrap an event as a spell, so it costs mana to use.
function as_spell(unit, event)
  local spell_event = new_event(&quot;auto&quot;, &quot;&quot;, true)
  spell_event.action = function(this)
    if unit.mana &gt; 0 then
      unit.mana -= 1
      sequence:insert(event)
    else
      sequence:insert(new_event(&quot;menu&quot;))
      sequence:insert(new_info_event(&quot;you don&apos;t have enough mana to cast this spell.&quot;))
    end
  end
  return spell_event
end
```

This will check if I have **enough mana** to use this event—and either cast the spell and deplete the mana, or cancel the event and inform me that I don&apos;t have enough mana.

Now I can wrap my `heal` event with `as_spell` and turn it into a magic spell!

```lua
as_spell(unit, new_heal_event(event_id, unit, 35))
```

## Animation

[PICO-8](https://www.lexaloffle.com/pico-8.php) doesn&apos;t really give us an animation framework. We can draw sprites at arbitrary locations and change some colour palettes, but aside from that—we&apos;re pretty much on our own.

Thankfully, in a turn-based RPG, the animations aren&apos;t very complex. I have &apos;units&apos; on two corners of the screen, and they flicker and bounce around a bit when hit.

To achieve, this, assume we have a `unit` object with some `x` and `y` position—its absolute position on the screen.

```lua
function draw_unit(unit)
  local x = 128 - spr_size
  local y = 0

  -- draw the unit
  spr(1, x, y)
end
```

I can move the unit by changing `x` and `y`, but what if I cancel an animation half way through? I don&apos;t want the animation state to be &apos;baked&apos; into the unit&apos;s actual position, because it will be harder for me to reset it.

My solution was to create an &apos;animation&apos; object, which keeps an independent frame count `n` and transformation `x, y`, which can be then _applied_ to the unit at render time.

```lua
function new_animation()
  local animation = {
    name = &quot;default&quot;,
    n = 0,
    frames_left = 15,
    x = 0,
    y = 0,
    color = 0,
  }
}
```

Now each update, we can also `update()` the animation and apply its transform to the unit. If the animation runs out of frames, it will disappear and things will be back to normal.

```lua
-- apply unit animation
if unit.animation then
    unit.animation:update(x, y)
    anim_spr_x = x + unit.animation.x
    anim_spr_y = y + unit.animation.y
    if unit.animation:has_ended() then unit.animation = nil end
end

-- draw the unit
spr(1, anim_spr_x, anim_spr_y)
```

However, we can also just cancel the animation at any time we want, no matter what frame it is on. This gave me a lot of modular control over the animation, but also prevented any part of the animation system having an impact on the logical game state.

## Tools

Here&apos;s some of the main tools/software I used for the job.

- [PICO-8](https://www.lexaloffle.com/pico-8.php): Virtual console, and framework to develop and run the game.
- [VSCode](https://code.visualstudio.com/): Code editor.
- [Pixaki](https://rizer.co/): iPad pixel art editor to draw and touch up the sprites (which to be honest, I mostly traced from Pokemon).

## Summary

That pretty much sums up my experience of implementing RPG combat in [PICO-8](https://www.lexaloffle.com/pico-8.php). Even with the lo-fi, 80&apos;s era constraints, I found that the core problems—like game design and event modelling—are still timeless.

With a bit of work, I think it&apos;d be possible to implement a more Pokemon-like RPG in PICO-8, but probably on a smaller scale, because of the memory and size limits (I was almost at 30% capacity with just this).

At some point though, dealing with over 1,000 lines of code in a single `lua` run-time becomes unwieldy. So whilst something like [Unity](https://unity.com/) is better suited for serious projects, PICO-8 is still a great way to learn and prototype ideas.

</link>
            <guid isPermaLink="true">http://localhost:3000/travel/나를찾는세계여행/
In a [previous post](./retro-games-with-pico-8) I talked about how making retro 8-bit games is a great way for fledgling developers to learn new things whilst expanding their portfolio.

I recently gave it a go myself, making a small RPG combat game called &quot;Wolfhunter&quot;.

I spent two weekends on the project, which—despite my prior experience in games development—still managed to surprise me with some interesting challenges.


## Concept

Wolfhunter is an 8-bit RPG where you play as a hunter facing off against a werewolf, in a Pokemon-like combat sequence.

You have magic spells and single-use items at your disposal, but the wolf is very powerful. The only way to kill it is to weaken it with your attacks, then finish it off with a silver-knife (which you only have one shot at).

## Gameplay


I set out to make a game loop that felt similar to the combat in [Pokemon Red/Blue](https://en.wikipedia.org/wiki/Pok%C3%A9mon_Red_and_Blue), which was the most popular title on the [original Nintendo Gameboy](https://en.wikipedia.org/wiki/Game_Boy).

The characters stand opposite each other, and take turns to fight. There&apos;s a bunch of other mechanics too, like strengths/weaknesses, status effects, and switching characters. Here&apos;s a scene from it:


For Wolfhunter, I copied the scene layout, the turn based fighting, and the status effects. I didn&apos;t have a chance to implement other aspects of Pokemon — so instead I doubled down on the mechanics I did implement.

### Core Mechanics

The units take turns to fight. The game ends when one of the character&apos;s HP is reduced to 0.

Each turn, the player has two basic abilities that can be used for free.

| Ability | Effect                         |
| ------- | ------------------------------ |
| Attack  | Deal 15 damage.                |
| Defend  | Blocks 15 damage for one turn. |

### Magic

The basic abilities were good to establish some baseline gameplay, but not enough to be interesting. I also added &apos;&quot;magic&quot;, which costs **1 mana** to use (you start with **5 mana**, and cannot cast spells if you run out).

| Spell    | Effect                                                                     |
| -------- | -------------------------------------------------------------------------- |
| Fireball | Deals 40 damage. Ignores defence.                                          |
| Spark    | Deals 12 damage and **blinds** the enemy, causing the next attack to miss. |
| Heal     | Recovers 35 HP and clears **bleed** effects.                               |

Magic is more powerful than just attacking or defending, but are in limited supply, and designed to _interact/react_ against enemy abilities.

### Items

Items are even more powerful than magic, but only have **1 use** per fight.

| Item         | Effect                                                    |
| ------------ | --------------------------------------------------------- |
| Crossbow     | Deals 25% of the enemy&apos;s HP as damage.                    |
| Elixir       | Recover 5 mana.                                           |
| Silver Knife | Deals 5 damage, but is the only way to kill the werewolf. |

### Enemy

Finally, to tie the gameplay together, the enemy must interact well with the player&apos;s abilities, and provide some kind of strategic challenge.

| Ability       | Effect                                                                               |
| ------------- | ------------------------------------------------------------------------------------ |
| Ravage        | Deals 8 damage and causes **bleeding**.                                              |
| Strong Defend | Blocks 20 damage for one turn.                                                       |
| Dark Flight   | Skips a turn, then deals 64 damage.                                                  |
| Raging Strike | Deals 18 damage but becomes **vulnerable** after, taking double damage for one turn. |

These enemy is strong, but the player has ways to mitigate each of its threats. Pretty much the point of the entire game here is figuring out what move to use next.

## Event Sequence

From an implementation standpoint, the most important part of the game is the &quot;event sequence&quot;. This system will control how the game flows, and sets the framework for everything else to follow.

I define an &quot;event&quot; as **something atomic that happens in the game**. It usually displays some description to the player, and requires the player to acknowledge. Examples:

- A character uses an ability.
- Damage is taken.
- Character is defeated.
- Turns switched.
- Status effect is applied.

This is pretty much the back-bone of a turn-based system. Everything in the game—from the menu selection, to mana consumption, to damage/block resolution—can be modelled with events.

And in this game, events are always sequential and happening in order. But new events can be added in the middle of the sequence—for example if an attack is blocked, we need a &quot;block&quot; event to resolve.

This is pretty much a [linked list](https://en.wikipedia.org/wiki/Linked_list), and that&apos;s how I implemented it. The events are the nodes. Additionally, when each event resolves, it can modify the nodes directly ahead of it, or at the tail of the list.

### Sequence

This is pretty much a linked list implementation. We start it off with an `new_info_event` (display some text to the player) that says &quot;it&apos;s your turn to move.&quot;

The `head` of the sequence is the event we are currently processing in the game.

```lua
function new_sequence()

  local first_event = new_info_event(&quot;it&apos;s your turn to move!&quot;)
  local sequence = {
    head = first_event,
    tail = first_event
  }

  -- move sequence cursor to the next event.
  sequence.next = function(this)
    this.head = this.head.next
  end

  -- add an event to the end of the sequence.
  sequence.add = function(this, e)
    this.tail.next = e
    this.tail = e
  end

  -- add an event after the head of the sequence.
  sequence.insert = function(this, e)
    e:get_tail().next = this.head.next
    this.head.next = e
  end

  return sequence
end
```

### Damage Event

Here&apos;s an example of an event that causes damage to a unit (character). The `action` is an anonymous function that executes _once_, when the event is processed.

This includes playing sound effects, animations, and actually modifying the HP values. In this case, if at run-time the damage causes a unit to die, then a `new_end_combat_event` is added to the sequence, along with a `new_info_event` to display some informative text to the player.

```lua
function new_damage_event(unit, value)

  local desc = unit.name..&quot; takes &quot;..value..&quot; damage!&quot;
  local dmg_event = new_event(&quot;damage&quot;, desc, true)

  dmg_event.action = function(this)
    unit.hp -= value
    unit:animate(new_hit_animation())
    sfx(3)
    if unit.hp &lt;= 0 then
      unit.hp = 0
      sequence:insert(new_end_combat_event(unit.name))
      sequence:insert(new_info_event(&quot;the fight has ended!&quot;))
    end
  end

  return dmg_event
end
```

### Sequence Control

In the `_update()` function of the game, we process the `head` event and show the appropriate information. Special event types, like `menu` will control what UI is shown.

Some events (`auto`) will be processed immediately—but most will require interaction from the player to progress.

```lua
-- update the menu if we are showing one.
if event.type == &quot;menu&quot; then combat_menu:update() end
if event.type == &quot;magic&quot; then magic_menu:update() end
if event.type == &quot;items&quot; then items_menu:update() end

-- each time we press x, the sequence progresses.
if btnp(5) or event.type == &quot;auto&quot; then sequence:next() end
if btnp(5) and (event.type == &quot;info&quot; or event.type == &quot;damage&quot;) then sfx(1) end
```

## Items and Magic

I think items and magic are an interesting one. Instead of being their own event types, I think it was a good chance to apply the [decorator pattern](https://en.wikipedia.org/wiki/Decorator_pattern).

That&apos;s because items and magic can be thought of as regular abilities—wrapped with some extra conditions!

Namely—we want to wrap the concept of **mana consumption** onto magic, and **single-use** onto items. Aside from those things, they still do anything else an ability can do. So what I&apos;m after here, is a function that can take in an **ability** (an arbitrary event), and turn it into a magic spell, or an item.

Consider we have this &apos;heal&apos; event. As is, this will recover 35 HP, and doesn&apos;t have any other cost or conditions associated with it.

```lua
function new_heal_event(name, unit, value)
 -- restore 35 hp!
end
```

Now, I have a decorator function, which accepts an `event`, and adds mana usage to it.

```lua
-- wrap an event as a spell, so it costs mana to use.
function as_spell(unit, event)
  local spell_event = new_event(&quot;auto&quot;, &quot;&quot;, true)
  spell_event.action = function(this)
    if unit.mana &gt; 0 then
      unit.mana -= 1
      sequence:insert(event)
    else
      sequence:insert(new_event(&quot;menu&quot;))
      sequence:insert(new_info_event(&quot;you don&apos;t have enough mana to cast this spell.&quot;))
    end
  end
  return spell_event
end
```

This will check if I have **enough mana** to use this event—and either cast the spell and deplete the mana, or cancel the event and inform me that I don&apos;t have enough mana.

Now I can wrap my `heal` event with `as_spell` and turn it into a magic spell!

```lua
as_spell(unit, new_heal_event(event_id, unit, 35))
```

## Animation

[PICO-8](https://www.lexaloffle.com/pico-8.php) doesn&apos;t really give us an animation framework. We can draw sprites at arbitrary locations and change some colour palettes, but aside from that—we&apos;re pretty much on our own.

Thankfully, in a turn-based RPG, the animations aren&apos;t very complex. I have &apos;units&apos; on two corners of the screen, and they flicker and bounce around a bit when hit.

To achieve, this, assume we have a `unit` object with some `x` and `y` position—its absolute position on the screen.

```lua
function draw_unit(unit)
  local x = 128 - spr_size
  local y = 0

  -- draw the unit
  spr(1, x, y)
end
```

I can move the unit by changing `x` and `y`, but what if I cancel an animation half way through? I don&apos;t want the animation state to be &apos;baked&apos; into the unit&apos;s actual position, because it will be harder for me to reset it.

My solution was to create an &apos;animation&apos; object, which keeps an independent frame count `n` and transformation `x, y`, which can be then _applied_ to the unit at render time.

```lua
function new_animation()
  local animation = {
    name = &quot;default&quot;,
    n = 0,
    frames_left = 15,
    x = 0,
    y = 0,
    color = 0,
  }
}
```

Now each update, we can also `update()` the animation and apply its transform to the unit. If the animation runs out of frames, it will disappear and things will be back to normal.

```lua
-- apply unit animation
if unit.animation then
    unit.animation:update(x, y)
    anim_spr_x = x + unit.animation.x
    anim_spr_y = y + unit.animation.y
    if unit.animation:has_ended() then unit.animation = nil end
end

-- draw the unit
spr(1, anim_spr_x, anim_spr_y)
```

However, we can also just cancel the animation at any time we want, no matter what frame it is on. This gave me a lot of modular control over the animation, but also prevented any part of the animation system having an impact on the logical game state.

## Tools

Here&apos;s some of the main tools/software I used for the job.

- [PICO-8](https://www.lexaloffle.com/pico-8.php): Virtual console, and framework to develop and run the game.
- [VSCode](https://code.visualstudio.com/): Code editor.
- [Pixaki](https://rizer.co/): iPad pixel art editor to draw and touch up the sprites (which to be honest, I mostly traced from Pokemon).

## Summary

That pretty much sums up my experience of implementing RPG combat in [PICO-8](https://www.lexaloffle.com/pico-8.php). Even with the lo-fi, 80&apos;s era constraints, I found that the core problems—like game design and event modelling—are still timeless.

With a bit of work, I think it&apos;d be possible to implement a more Pokemon-like RPG in PICO-8, but probably on a smaller scale, because of the memory and size limits (I was almost at 30% capacity with just this).

At some point though, dealing with over 1,000 lines of code in a single `lua` run-time becomes unwieldy. So whilst something like [Unity](https://unity.com/) is better suited for serious projects, PICO-8 is still a great way to learn and prototype ideas.

</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/나를찾는세계여행/
Ever since the pandemic started, I&apos;ve noticed QR codes creeping into my daily life. Venue check-ins, digital menus at restaurants, and online payments.

I thought it&apos;d be fun to explore the technology a little bit, so I&apos;ve built a micro web-app that lets you save messages and view them later using a QR code. Sort of a &quot;Hello World&quot; QR code project.

In this post, I&apos;ll be sharing how I built this using Python and AWS free tier.

You can try out the [app itself here](https://qr.pixegami.com/). The [source code](https://github.com/pixegami/qr-code-webapp) is also available on GitHub.

![images/qr-code-demo.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1628899108564/NGWiGc3-w.gif)

## What is a QR Code?

We&apos;ve all seen and used them before, but how does a QR code actually work? The first thing to understand is that it is an [internationally standardized specification](https://www.iso.org/obp/ui/#iso:std:iso-iec:18004:ed-3:v1:en):

&gt; This International Standard [...] specifies the QR Code symbology characteristics, data character encoding methods, symbol formats, dimensional characteristics, error correction rules [...]

As long an image respects these standard, it is a &quot;QR code&quot; and can be understood by most smartphone cameras. The image itself also has a kind of anatomy:

![images/qr_code_anatomy.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1628900340423/NSYNLARYu.png)

It is quite interesting, but ultimately these were the three things I cared about:

- We can store up to around 4000 alpha-numeric symbols in a standard sized QR code.
- QR codes can have a &quot;URL&quot; format, which will prompt phones to open it up in a browser when scanned.
- QR codes have error-correction capabilities, which allow it to remain function even if some parts of it is covered or removed—_I did not know this!_

## Architecture

I want to make an app that lets me author some arbitrary content (in this case a short text message), have it persisted somewhere, and generate a QR code that loads the content when I scan it with the phone.

So after breaking these requirements into technical tasks, here is the strategy:

- **Author some arbitrary content**: I&apos;ll use a static React front-end to let the user write their message.
- **Persist the content**: I&apos;ll have a serverless API (using AWS Lambda and API Gateway) for the front-end to use. It will receive the message (a string) and put it into database for storage. I&apos;ll generate a unique ID and use this as the `tag` for the object.
- **Generate a QR Code**: I&apos;ll first come up with a URL string I want to encode into the QR image (using the `tag` I made above). Then I&apos;ll find a Python library that lets me turn this URL string into a QR image. I&apos;ll make the image accessible to the user.
- **Load the content**: Now I&apos;ll implement the URL endpoint that the QR code re-directs to. It will probably have the `tag` as a query parameter, so I&apos;ll just use that to look up the message in my table and send it back to the page.

### Overall Stack

- **Frontend**: React (Typescript)
- **Backend**: Python code with AWS Lambda and API Gateway
- **Database**: DynamoDB
- **Image Storage**: Amazon S3

## Implementation

Most of the app&apos;s &apos;meaty&apos; logic lives in the [`qr-code-infrastructure/compute/api`](https://github.com/pixegami/qr-code-webapp/tree/main/qr-code-infrastructure/compute/api) folder, as a bunch
of Python functions.

### Generating a `tag` and a URL

When a user sends a message, it generates a random tag using `uuid4` (which I truncated to 12
characters to keep it a bit shorter). A URL to view this message will then be used to create a QR code.

```python

# uuid is a built-in Python library to generate random IDs with, with low chance of collision.
qr_id = uuid.uuid4().hex[:12]
qr_tag = f&quot;qr-{qr_id}&quot;

# We&apos;ll later have to implement this page so that it can load our message with the given tag.
content = f&quot;https://qr.pixegami.com/view?tag={qr_tag}&quot;
```

### Generating the QR code image

One of the things I really love about Python is how there&apos;s a library for everything. I just typed in &quot;qr code&quot; into PyPI and found this [library](https://pypi.org/project/qrcode/), which took a minute to install and use.

Using the `qrcode` library, I create an image. It&apos;s a one-liner.

```python
qr_image = qrcode.make(content)
```

But now we need to save this image somewhere. Since this function is running on AWS Lambda, we can&apos;t just [save it anywhere](https://aws.amazon.com/lambda/faqs/).

&gt; Each Lambda function receives 500MB of non-persistent disk space in its own /tmp directory.

This must be saved into `/tmp` folder on Lambda
since that is the only folder that is writable (hence why we need to pass down a `path`).

```python
image_path = os.path.join(path, f&quot;{qr_tag}.png&quot;)
qr_image.save(image_path)
```

### Showing the QR image to the user

Now in our Lambda runtime we have a `.png` file at `image_path`. We need to find a way to get it to the user. We&apos;ll do this by storing the image somewhere permanent, and then generate a URL for that image.

Let&apos;s upload it to an [S3 bucket](https://aws.amazon.com/s3/?nc2=h_ql_prod_fs_s3).

```python
bucket_name = os.environ[&quot;IMAGE_BUCKET_NAME&quot;]
key = f&quot;{qr_result.tag}.png&quot;
s3client = boto3.client(&quot;s3&quot;)
s3client.upload_file(qr_result.image_path, bucket_name, key)
```

I then create a [pre-signed URL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ShareObjectPreSignedURL.html) from the bucket so that I can tell the frontend where to load the
QR code image from.

&gt; All objects by default are private. Only the object owner has permission to access these objects. However, the object owner can optionally share objects with others by creating a presigned URL, using their own security credentials, to grant time-limited permission to download the objects.

It expires in `3600` seconds, but that&apos;s fine because I don&apos;t need the image
itself to be long lived.

```python
presigned_url = s3client.generate_presigned_url(
    &quot;get_object&quot;,
    Params={&quot;Bucket&quot;: bucket_name, &quot;Key&quot;: key},
    ExpiresIn=3600,
)
```

This URL is sent back to the front-end for display.

![images/qr-code.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1628903696663/uU7ksdnrL.png)

### Persisting the `tag` and the message

Finally I need to write an entry into the [DynamoDB table](https://aws.amazon.com/dynamodb/) so that when a user scans a QR code, we can fetch the message later.

The only important thing to know about DynamoDB here is that it acts as a simple key-value store, and it is also serverless.

```python
item = QrItem()
item.pk = qr_result.tag  # This is the UUID we generated above.
item.message = message  # This is the message body.
self.database.put_item(item)
```

### Scanning the QR image to load the content

On the front-end, it&apos;s simple just a page for this URL we generated earlier `https://qr.pixegami.com/view?tag={qr_tag}` to look up the table value for the item with that `tag`.

I [used](https://github.com/pixegami/qr-code-webapp/blob/main/qr-code-site/src/components/pages/ViewPage.tsx#L19) a [React `useEffect` hook](https://reactjs.org/docs/hooks-effect.html), which lets me make an API call once the page loads.

I have another API on the back-end, which receives this `tag` and looks up the saved message. It then sends it back for the front-end to display.

```python
serialized_item = self.database.get_item(QrItem(tag))
item = QrItem().deserialize(serialized_item)
message = item.message
```

![images/qr-result.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1628903629263/V2Jg0j8r3.png)

## Wrap Up

That&apos;s pretty much it! Now if I ever need to use QR codes as part of an application in the future I&apos;ll just dig this up 😅

And if you&apos;re keen to try this out yourself, feel free to check out the [source](https://github.com/pixegami/qr-code-webapp). It&apos;s a small project so you can probably build it out in a few hours (or a few days, if you&apos;re new to AWS as well).
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/나를찾는세계여행/
Ever since the pandemic started, I&apos;ve noticed QR codes creeping into my daily life. Venue check-ins, digital menus at restaurants, and online payments.

I thought it&apos;d be fun to explore the technology a little bit, so I&apos;ve built a micro web-app that lets you save messages and view them later using a QR code. Sort of a &quot;Hello World&quot; QR code project.

In this post, I&apos;ll be sharing how I built this using Python and AWS free tier.

You can try out the [app itself here](https://qr.pixegami.com/). The [source code](https://github.com/pixegami/qr-code-webapp) is also available on GitHub.

![images/qr-code-demo.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1628899108564/NGWiGc3-w.gif)

## What is a QR Code?

We&apos;ve all seen and used them before, but how does a QR code actually work? The first thing to understand is that it is an [internationally standardized specification](https://www.iso.org/obp/ui/#iso:std:iso-iec:18004:ed-3:v1:en):

&gt; This International Standard [...] specifies the QR Code symbology characteristics, data character encoding methods, symbol formats, dimensional characteristics, error correction rules [...]

As long an image respects these standard, it is a &quot;QR code&quot; and can be understood by most smartphone cameras. The image itself also has a kind of anatomy:

![images/qr_code_anatomy.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1628900340423/NSYNLARYu.png)

It is quite interesting, but ultimately these were the three things I cared about:

- We can store up to around 4000 alpha-numeric symbols in a standard sized QR code.
- QR codes can have a &quot;URL&quot; format, which will prompt phones to open it up in a browser when scanned.
- QR codes have error-correction capabilities, which allow it to remain function even if some parts of it is covered or removed—_I did not know this!_

## Architecture

I want to make an app that lets me author some arbitrary content (in this case a short text message), have it persisted somewhere, and generate a QR code that loads the content when I scan it with the phone.

So after breaking these requirements into technical tasks, here is the strategy:

- **Author some arbitrary content**: I&apos;ll use a static React front-end to let the user write their message.
- **Persist the content**: I&apos;ll have a serverless API (using AWS Lambda and API Gateway) for the front-end to use. It will receive the message (a string) and put it into database for storage. I&apos;ll generate a unique ID and use this as the `tag` for the object.
- **Generate a QR Code**: I&apos;ll first come up with a URL string I want to encode into the QR image (using the `tag` I made above). Then I&apos;ll find a Python library that lets me turn this URL string into a QR image. I&apos;ll make the image accessible to the user.
- **Load the content**: Now I&apos;ll implement the URL endpoint that the QR code re-directs to. It will probably have the `tag` as a query parameter, so I&apos;ll just use that to look up the message in my table and send it back to the page.

### Overall Stack

- **Frontend**: React (Typescript)
- **Backend**: Python code with AWS Lambda and API Gateway
- **Database**: DynamoDB
- **Image Storage**: Amazon S3

## Implementation

Most of the app&apos;s &apos;meaty&apos; logic lives in the [`qr-code-infrastructure/compute/api`](https://github.com/pixegami/qr-code-webapp/tree/main/qr-code-infrastructure/compute/api) folder, as a bunch
of Python functions.

### Generating a `tag` and a URL

When a user sends a message, it generates a random tag using `uuid4` (which I truncated to 12
characters to keep it a bit shorter). A URL to view this message will then be used to create a QR code.

```python

# uuid is a built-in Python library to generate random IDs with, with low chance of collision.
qr_id = uuid.uuid4().hex[:12]
qr_tag = f&quot;qr-{qr_id}&quot;

# We&apos;ll later have to implement this page so that it can load our message with the given tag.
content = f&quot;https://qr.pixegami.com/view?tag={qr_tag}&quot;
```

### Generating the QR code image

One of the things I really love about Python is how there&apos;s a library for everything. I just typed in &quot;qr code&quot; into PyPI and found this [library](https://pypi.org/project/qrcode/), which took a minute to install and use.

Using the `qrcode` library, I create an image. It&apos;s a one-liner.

```python
qr_image = qrcode.make(content)
```

But now we need to save this image somewhere. Since this function is running on AWS Lambda, we can&apos;t just [save it anywhere](https://aws.amazon.com/lambda/faqs/).

&gt; Each Lambda function receives 500MB of non-persistent disk space in its own /tmp directory.

This must be saved into `/tmp` folder on Lambda
since that is the only folder that is writable (hence why we need to pass down a `path`).

```python
image_path = os.path.join(path, f&quot;{qr_tag}.png&quot;)
qr_image.save(image_path)
```

### Showing the QR image to the user

Now in our Lambda runtime we have a `.png` file at `image_path`. We need to find a way to get it to the user. We&apos;ll do this by storing the image somewhere permanent, and then generate a URL for that image.

Let&apos;s upload it to an [S3 bucket](https://aws.amazon.com/s3/?nc2=h_ql_prod_fs_s3).

```python
bucket_name = os.environ[&quot;IMAGE_BUCKET_NAME&quot;]
key = f&quot;{qr_result.tag}.png&quot;
s3client = boto3.client(&quot;s3&quot;)
s3client.upload_file(qr_result.image_path, bucket_name, key)
```

I then create a [pre-signed URL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ShareObjectPreSignedURL.html) from the bucket so that I can tell the frontend where to load the
QR code image from.

&gt; All objects by default are private. Only the object owner has permission to access these objects. However, the object owner can optionally share objects with others by creating a presigned URL, using their own security credentials, to grant time-limited permission to download the objects.

It expires in `3600` seconds, but that&apos;s fine because I don&apos;t need the image
itself to be long lived.

```python
presigned_url = s3client.generate_presigned_url(
    &quot;get_object&quot;,
    Params={&quot;Bucket&quot;: bucket_name, &quot;Key&quot;: key},
    ExpiresIn=3600,
)
```

This URL is sent back to the front-end for display.

![images/qr-code.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1628903696663/uU7ksdnrL.png)

### Persisting the `tag` and the message

Finally I need to write an entry into the [DynamoDB table](https://aws.amazon.com/dynamodb/) so that when a user scans a QR code, we can fetch the message later.

The only important thing to know about DynamoDB here is that it acts as a simple key-value store, and it is also serverless.

```python
item = QrItem()
item.pk = qr_result.tag  # This is the UUID we generated above.
item.message = message  # This is the message body.
self.database.put_item(item)
```

### Scanning the QR image to load the content

On the front-end, it&apos;s simple just a page for this URL we generated earlier `https://qr.pixegami.com/view?tag={qr_tag}` to look up the table value for the item with that `tag`.

I [used](https://github.com/pixegami/qr-code-webapp/blob/main/qr-code-site/src/components/pages/ViewPage.tsx#L19) a [React `useEffect` hook](https://reactjs.org/docs/hooks-effect.html), which lets me make an API call once the page loads.

I have another API on the back-end, which receives this `tag` and looks up the saved message. It then sends it back for the front-end to display.

```python
serialized_item = self.database.get_item(QrItem(tag))
item = QrItem().deserialize(serialized_item)
message = item.message
```

![images/qr-result.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1628903629263/V2Jg0j8r3.png)

## Wrap Up

That&apos;s pretty much it! Now if I ever need to use QR codes as part of an application in the future I&apos;ll just dig this up 😅

And if you&apos;re keen to try this out yourself, feel free to check out the [source](https://github.com/pixegami/qr-code-webapp). It&apos;s a small project so you can probably build it out in a few hours (or a few days, if you&apos;re new to AWS as well).
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/나를찾는세계여행/
The [SaaS (software as a service)](https://en.wikipedia.org/wiki/Software_as_a_service) model underpins many of today&apos;s successful new businesses. Knowing how to build one from start to finish is probably a useful addition to any software developer&apos;s skill set.

But even when you strip a SaaS product of its business logic, there&apos;s still a non-trivial amount of work and trade-offs to consider.

In this project, my goal was to build a fully serverless SaaS web-app with authentication and payments — the two vital organs of any business.

My implementation is opinionated (as you&apos;ll see), and intended to serve as a starting point for new SaaS ideas in the future. Here&apos;s what&apos;s included:

- [Authentication](#authentication)
- [Payments (Stripe)](#payments-stripe)
- [Frontend (React)](#frontend-react)
- [Backend API](#backend-api)
- [Serverless architecture](#serverless-architecture)
- [Infrastructure as code](#infrastructure-as-code)
- [CRUD operations](#crud-operations)
- [Lessons Learnt](#lessons-learnt)

You can view the example at https://saas-starter-stack.com/app/ and the source on [GitHub](https://github.com/pixegami/saas-starter). In this post, I&apos;ll be reflecting on my choices and experience for each of the above features.

### Authentication

**Don&apos;t roll your own auth!** It&apos;s hard, and mistakes can be devastating to a business. With that said, I did it anyway — mostly to learn from it. Here&apos;s also some [discussion on Hackernews](https://news.ycombinator.com/item?id=22001918) on why you might want to build your own auth.

I used [bcrypt](https://codahale.com/how-to-safely-store-a-password/) and [JSON Web Tokens](https://jwt.io/), and stored credentials on DynamoDB. That part wasn&apos;t so bad. The real grind came from building things like exponential back-offs for failed attempts, account verification and reset mechanisms, and patching all the security edge cases.

I got it to a roughly working state, and then called it a day. If this was a production system, I&apos;d probably look into something like [Cognito](https://aws.amazon.com/cognito/), [Firebase](https://firebase.google.com/products/auth) or [Okta](https://www.okta.com/).

### Payments (Stripe)

From payments integration, [Stripe](https://stripe.com) was an easy choice. No prominent alternative come to mind, and I&apos;ve heard high praises about Stripe&apos;s developer onboarding experience.

I set up [subscription payment](https://stripe.com/en-au/billing) integration with the project, and I think the developer experience lives up to expectations. The tutorials were well structured and concise.

But the little thing that impressed me the most was when I typed in &apos;test card&apos; in a [search box](https://stripe.com/docs/testing), it actually just straight up gave me a card-number I could copy straight to my clipboard. Whoever thought of that just saved me a click, and I&apos;m grateful.

### Frontend (React)

The frontend is a responsive web-app build with [React](https://reactjs.org/). It seems like React is still the dominant technology is the area, although I&apos;ve yet to try its main competitors like [Vue](https://vuejs.org/) or [Svelte](https://svelte.dev/).

I used [TailWindCSS](https://tailwindcss.com/) for styling, and prefer to anything I&apos;ve tried in the past (Boostrap CSS, Semantic UI and just vanilla CSS).

I then used [Gatsby](https://www.gatsbyjs.com/) to optimize the static site rendering — but I&apos;m not sure if the extra steps are worth it at this stage. It&apos;s better for SEO and performance, but costs extra development cycles.

Overall though, I was quite satisfied with this stack for the frontend, and would be happy to use it for production.

### Backend API

The backend is a serverless REST API implemented in Python and hosted as [Lambda functions](https://aws.amazon.com/lambda/) behind API Gateway.

My main challenge here was to abstract away the lower level things (like CORS, HTTP response formatting, database access) as much as possible. I did this via [Lambda layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html), which allowed me to group a bunch of Python packages and common scripts together.

This allowed me to implement handlers that are quite short and readable, which is think is key to maintainability.

### Serverless architecture

Why serverless? I think for a lot of businesses it simply wins out from a cost and scaling perspective. I could probably serve north of 500k API requests for [less than a dollar](https://aws.amazon.com/lambda/pricing/).

However, this implies that the choice of database must be serverless as well. I chose [DynamoDB](https://aws.amazon.com/dynamodb/) just for the ease of integration. But if I had different data modeling requires (for which the DynamoDB architecture might be unfit), I might look into [Aurora](https://aws.amazon.com/rds/aurora/) or [Fauna](https://fauna.com/).

### Infrastructure as code

Configuring infrastructure is time-consuming and error prone. If I want to be able to deploy a copy of this service quickly, I&apos;d have to [model it as code (IaC)](https://en.wikipedia.org/wiki/Infrastructure_as_code). In keeping theme with my AWS integration so far, I&apos;ve modeled this project with [AWS CDK](https://docs.aws.amazon.com/cdk/latest/guide/home.html) in Typescript.

With this the entire frontend and backend can be deployed to a brand new account or domain in less than 30 minutes with just a [few configuration changes](https://github.com/pixegami/saas-starter/blob/master/saas-infrastructure/service.config.json).

### CRUD operations

Finally, I&apos;ve added some simple Twitter-like posting capabilities to the project just as a stub for the actual business logic. It has ways to interact with the authentication API, and find out whether a user is verified, and if they are a paying subscriber.

## Closing Thoughts

Honestly, I&apos;m so tired of this project already. It was a lot more complex than I expected — especially for an app that really doesn&apos;t do _anything_! But I did learn a lot along the way though, and will probably be faster the second time around.

My top three takeaways are:

- Don&apos;t build your own auth.
- You&apos;ll probably rebuild the project at least once or twice, so design things to be flexible.
- Having integration tests really paid off.
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/나를찾는세계여행/
The [SaaS (software as a service)](https://en.wikipedia.org/wiki/Software_as_a_service) model underpins many of today&apos;s successful new businesses. Knowing how to build one from start to finish is probably a useful addition to any software developer&apos;s skill set.

But even when you strip a SaaS product of its business logic, there&apos;s still a non-trivial amount of work and trade-offs to consider.

In this project, my goal was to build a fully serverless SaaS web-app with authentication and payments — the two vital organs of any business.

My implementation is opinionated (as you&apos;ll see), and intended to serve as a starting point for new SaaS ideas in the future. Here&apos;s what&apos;s included:

- [Authentication](#authentication)
- [Payments (Stripe)](#payments-stripe)
- [Frontend (React)](#frontend-react)
- [Backend API](#backend-api)
- [Serverless architecture](#serverless-architecture)
- [Infrastructure as code](#infrastructure-as-code)
- [CRUD operations](#crud-operations)
- [Lessons Learnt](#lessons-learnt)

You can view the example at https://saas-starter-stack.com/app/ and the source on [GitHub](https://github.com/pixegami/saas-starter). In this post, I&apos;ll be reflecting on my choices and experience for each of the above features.

### Authentication

**Don&apos;t roll your own auth!** It&apos;s hard, and mistakes can be devastating to a business. With that said, I did it anyway — mostly to learn from it. Here&apos;s also some [discussion on Hackernews](https://news.ycombinator.com/item?id=22001918) on why you might want to build your own auth.

I used [bcrypt](https://codahale.com/how-to-safely-store-a-password/) and [JSON Web Tokens](https://jwt.io/), and stored credentials on DynamoDB. That part wasn&apos;t so bad. The real grind came from building things like exponential back-offs for failed attempts, account verification and reset mechanisms, and patching all the security edge cases.

I got it to a roughly working state, and then called it a day. If this was a production system, I&apos;d probably look into something like [Cognito](https://aws.amazon.com/cognito/), [Firebase](https://firebase.google.com/products/auth) or [Okta](https://www.okta.com/).

### Payments (Stripe)

From payments integration, [Stripe](https://stripe.com) was an easy choice. No prominent alternative come to mind, and I&apos;ve heard high praises about Stripe&apos;s developer onboarding experience.

I set up [subscription payment](https://stripe.com/en-au/billing) integration with the project, and I think the developer experience lives up to expectations. The tutorials were well structured and concise.

But the little thing that impressed me the most was when I typed in &apos;test card&apos; in a [search box](https://stripe.com/docs/testing), it actually just straight up gave me a card-number I could copy straight to my clipboard. Whoever thought of that just saved me a click, and I&apos;m grateful.

### Frontend (React)

The frontend is a responsive web-app build with [React](https://reactjs.org/). It seems like React is still the dominant technology is the area, although I&apos;ve yet to try its main competitors like [Vue](https://vuejs.org/) or [Svelte](https://svelte.dev/).

I used [TailWindCSS](https://tailwindcss.com/) for styling, and prefer to anything I&apos;ve tried in the past (Boostrap CSS, Semantic UI and just vanilla CSS).

I then used [Gatsby](https://www.gatsbyjs.com/) to optimize the static site rendering — but I&apos;m not sure if the extra steps are worth it at this stage. It&apos;s better for SEO and performance, but costs extra development cycles.

Overall though, I was quite satisfied with this stack for the frontend, and would be happy to use it for production.

### Backend API

The backend is a serverless REST API implemented in Python and hosted as [Lambda functions](https://aws.amazon.com/lambda/) behind API Gateway.

My main challenge here was to abstract away the lower level things (like CORS, HTTP response formatting, database access) as much as possible. I did this via [Lambda layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html), which allowed me to group a bunch of Python packages and common scripts together.

This allowed me to implement handlers that are quite short and readable, which is think is key to maintainability.

### Serverless architecture

Why serverless? I think for a lot of businesses it simply wins out from a cost and scaling perspective. I could probably serve north of 500k API requests for [less than a dollar](https://aws.amazon.com/lambda/pricing/).

However, this implies that the choice of database must be serverless as well. I chose [DynamoDB](https://aws.amazon.com/dynamodb/) just for the ease of integration. But if I had different data modeling requires (for which the DynamoDB architecture might be unfit), I might look into [Aurora](https://aws.amazon.com/rds/aurora/) or [Fauna](https://fauna.com/).

### Infrastructure as code

Configuring infrastructure is time-consuming and error prone. If I want to be able to deploy a copy of this service quickly, I&apos;d have to [model it as code (IaC)](https://en.wikipedia.org/wiki/Infrastructure_as_code). In keeping theme with my AWS integration so far, I&apos;ve modeled this project with [AWS CDK](https://docs.aws.amazon.com/cdk/latest/guide/home.html) in Typescript.

With this the entire frontend and backend can be deployed to a brand new account or domain in less than 30 minutes with just a [few configuration changes](https://github.com/pixegami/saas-starter/blob/master/saas-infrastructure/service.config.json).

### CRUD operations

Finally, I&apos;ve added some simple Twitter-like posting capabilities to the project just as a stub for the actual business logic. It has ways to interact with the authentication API, and find out whether a user is verified, and if they are a paying subscriber.

## Closing Thoughts

Honestly, I&apos;m so tired of this project already. It was a lot more complex than I expected — especially for an app that really doesn&apos;t do _anything_! But I did learn a lot along the way though, and will probably be faster the second time around.

My top three takeaways are:

- Don&apos;t build your own auth.
- You&apos;ll probably rebuild the project at least once or twice, so design things to be flexible.
- Having integration tests really paid off.
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/나를찾는세계여행/
**성공 일까요?**</link>
            <guid isPermaLink="true">http://localhost:3000/travel/나를찾는세계여행/
**성공 일까요?**</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/미국/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/미국/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/미국/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</link>
            <guid isPermaLink="true">http://localhost:3000/travel/미국/
밴쿠버를 대표하는 린밸리는 푸른 대자연과 다채로운 문화가 조화롭게 어우러진 곳입니다. 캐나다에서 가장 큰 도시 공원으로, 피크뷰 전망대에서의 환상적인 전망과 토템 폴스의 원주민 문화 체험은 반드시 경험해야 할 가치가 있습니다. 자연과 문화를 동시에 느낄 수 있는 린밸리에서 특별한 시간을 보내보세요.

## 린밸리의 아름다운 자연과 다양한 문화 체험

&gt; 밴쿠버의 중심지에서 차로 약 30분 정도 떨어진 곳에 위치한 린밸리는 자연과 문화가 조화를 이루는 매력적인 여행지입니다. 이곳은 밴쿠버를 대표하는 큰 도시 공원 중 하나로, 다양한 야외 활동과 문화 체험을 즐길 수 있는 장소로 알려져 있습니다.

### 린밸리의 피크뷰 전망대와 토템 폴스

린밸리의 래틀스네이크 지역에 위치한 피크뷰 전망대는 환상적인 경치를 선사합니다. 밴쿠버 시내 전경과 코스코 시티, 그리고 래틀스네이크 산맥을 한눈에 감상할 수 있는 곳으로, 해가 떠오를 때와 해가 질 때의 경치는 감탄을 자아냅니다. 피크뷰 전망대에서의 하이킹은 자연과 어울리는 즐거운 활동입니다.

토템 폴스는 원주민 문화를 체험할 수 있는 중요한 장소로, 다양한 토템 폴과 원주민 예술 작품들을 감상할 수 있습니다. 원주민 문화에 대한 이해를 높이는 좋은 기회가 됩니다.

### 그린랜드 정원과 밴쿠버 수족관

린밸리 내에 위치한 그린랜드 정원은 아름다운 식물과 꽃들로 가득 찬 공원으로, 자연을 만끽하며 휴식을 취할 수 있는 좋은 장소입니다. 봄과 여름에는 다채로운 꽃들이 만발하며 아름다운 풍경을 연출합니다.

밴쿠버 수족관 역시 린밸리에서 즐길 수 있는 큰 매력 중 하나입니다. 수족관은 해양 생물 다양성을 보여주는 곳으로, 상어, 해마, 다양한 어류들을 비롯해 해양 생태계를 알아보는 좋은 기회를 제공합니다.

린밸리는 밴쿠버의 자연과 문화를 경험하며 즐길 수 있는 멋진 여행지로, 자연 속에서 여유를 즐기고 문화적인 경험을 풍부하게 즐길 수 있는 곳입니다.

---
subtitle: &quot;여행지 2: 버나비 마운틴 - 도시를 빠져나온 자연의 낙원&quot;
date: &quot;2023-1-5&quot;
---

### 버나비 마운틴의 풍부한 자연 경관과 여유로운 휴식

밴쿠버에서 약간 떨어진 곳에 위치한 버나비 마운틴은 도시 생활에서 벗어나 푸른 자연과 조용한 분위기를 즐길 수 있는 고요한 여행지입니다.

버나비 마운틴의 등산로와 자전거 도로는 아름다운 자연 경관을 누리며 활력을 되찾는 좋은 방법입니다. 모레나 포인트에서는 놀라운 황금빛 일몰을 경험하며 일상에서 느낄 수 없는 특별한 순간을 만끽할 수 있습니다. 지역 갤러리에서는 지역 예술가들의 작품을 감상하며 예술적인 영감을 얻을 수 있습니다.

더불어, 버나비 마운틴 주변의 자연 환경은 힐링과 휴식을 위한 완벽한 장소입니다. 자연 속에서 몸과 마음을 정화하며 일상에서 벗어나 여유로운 시간을 보내보세요.



---
subtitle: &quot;여행지 3: 화이트 락 - 아름다운 자연 경관과 평화로운 시간&quot;
date: &quot;2023-1-5&quot;
---

### 화이트 락의 아름다운 자연과 평화로운 휴식

밴쿠버 근처에 위치한 화이트 락은 그림 같은 풍경과 평화로운 분위기로 여행객들을 매료시키는 매력적인 곳입니다.

화이트 락의 해안선을 따라 산책하며 탁 트인 바다와 자연 경관을 감상하세요. 해안에서 드러나는 바위와 파도 소리는 마치 자연과 대화하며 여유를 즐기는 것 같은 기분을 불러일으킵니다. 또한, 현지 레스토랑에서 신선한 해산물을 맛보며 지역의 특색있는 음식문화를 경험할 수 있습니다.

화이트 락은 스키를 타지 않더라도 아름다운 자연 경관과 평화로운 분위기를 품고 있는 곳으로, 자연 속에서 힐링과 평온한 시간을 보낼 수 있는 좋은 여행지입니다.

You&apos;re all set to start using AWS.

## Why AWS?

When we bring &quot;the cloud&quot; into a project, it&apos;s usually because there&apos;s some capability we&apos;d like to add.

* Hosting for a website or service.
* File or data storage.
* On-demand computation.
* Authentication.

And there&apos;s many viable solutions to choose from—[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).

So why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user&apos;s perspective:

* **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.

* **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.

On the flip-side, the biggest drawback is its upfront complexity.

Personally though, the reason I use AWS is because it&apos;s the technology I&apos;m most familiar with.


## Why Serverless?

**It&apos;s cheaper.** Most cloud &quot;getting started&quot; guides will show you how to spin up a server—a mercenary rented computer that stays online  24/7 to do your bidding.

But for most of my projects, I&apos;m going utilize technology that doesn&apos;t require a hosted server. In particular:

| Service | Purpose |
| --- | --- |
| S3 | File storage |
| DynamoDB | Database |
| Lambda | Compute engine |

Their on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.

For small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).

In comparison, the price of hosting a server typically starts at **$5.00 per month**.

## Continue Learning

* [Official documentation](https://aws.amazon.com/getting-started/)
* [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)
* [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)
</guid>
        </item>
        <item>
            <title><![CDATA[No title]]></title>
            <link>http://localhost:3000/travel/미국/


## 미국 뉴욕 날씨[뉴욕 날씨 보기](https://www.accuweather.com/ko/us/new-york/10021/weather-forecast/349727)

뉴욕은 미국의 수도는 아니지만 미국에서 가장 큰 도시로 정말로 많은 전세계 관광객들이 방문하는 경제의 중심지이자 최고의 관광도시라고 할 수 있습니다.[뉴욕 날씨 보기](https://www.accuweather.com/ko/us/new-york/10021/weather-forecast/349727)

###### 미국 뉴욕으로 여행을 갈때 고려해야 할 사항 중 하나가 바로 [계절별날씨](https://www.accuweather.com/ko/us/new-york/10021/weather-forecast/349727)입니다. 
뉴욕은 우리나라와 마찬가지로 사계절이 뚜렸하지만 겨울에는 서울 보다는 추운 날씨가 많고 여름에는 조금은 건조한 기후를 나타냅니다.

이번 포스팅에서는 여행자로서[뉴욕 날씨 보기](https://www.accuweather.com/ko/us/new-york/10021/weather-forecast/349727)
 고려해야할 미국의 계절별 날씨에 대해서 알아보도록 하겠습니다.





## 여행자가 알아야 할 뉴욕 날씨

### (1) 봄철 (3월 ~ 5월)
미국 뉴욕의 봄철 날씨는 전반적으로 서울 보다는 더 추운 경우가 많습니다. 우리나라 보다는 봄이 늦게 오며 3월까지는 아침에는 영하권의 날씨를 보이는 날도 꽤나 있습니다.
3월에서 4월초까지는 곳곳에 쌓여있는 눈을 볼 수 있을 정도로 우리가 생각하는 것 보다는 추운날씨를 보이기 때문에 3월, 4월에 뉴욕을 여행하는 사람들은 조금 두꺼운 외투를 준비하는 것이 좋습니다.
드문 경우이기는 하지만 5월에도 눈이 내리는 경우도 있으니 참고하면 좋을 것 같고 일반적으로는 4월말 ~ 5월초 부터는 야외에서 활동하기에 좋은 날씨가 이어집니다.
날씨와 함께 고려할 점은 미국의 학교들은 3월에 봄방학이 있으며 이 시기에는 호텔, 항공권 등의 가격이 일시적으로 오르는 경우가 있으니 저렴한 여행을 원한다면 이 시기를 피하는 것이 좋습니다.


### (2) 여름철 (6월 ~ 8월)
뉴욕의 여름은 우리나라 보다는 건조하며 화창한 날씨를 보이는 경우가 많이 있습니다. 이 시기가 여행하기에는 가장 좋지만 또한 항공권, 호텔 등의 가격이 제일 비싼 시기인 것 같습니다.
대부분 미국의 초중고 학교들이 6월말에 방학을 시작하기 때문에 여름철에 뉴욕을 여행하기에 가장 좋은 시기는 6월 초중순입니다.
7월, 8월은 30도가 넘는 무더운 날씨가 이어지는 경우도 있지만 우리나라 보다는 건조하기 때문에 불꽤지수는 상대적으로 낮은 편입니다.
여름철에는 우리나라 장마처럼 지속적으로 비가 오는 경우는 없지만 간혹 소나기가 오는 경우가 꽤 있으니 우산, 우비 등을 준비해 가면 여행에 큰 도움이 됩니다.


### (3) 가을철 (9월 ~ 11월)
뉴욕의 가을은 정말로 아름답고 누구나 한번쯤은 경험해 보고 싶은 정말로 여행하기 좋은 시즌입니다.
뉴욕은 8월말 정도만 되어도 아침의 날씨는 서늘한 느낌을 받을 수 있으며 확실히 우리나라 보다는 가을이 빨리 오는 것을 느낄 수 있습니다.
특히 9월말 부터 시작되는 가을 단풍은 우리나라의 단풍과는 다른 운치를 느낄 수 있어서 항상 좋은 느낌을 받는 것 같습니다.
10월에는 센트럴파크만 가도 충분히 가을을 만끽할 수 있으며 10월 마지막 날은 할로윈이라는 행사를 도시 어느 곳에서나 체험할 수 있는 좋은 기회입니다.
9월 첫째주는 미국에 노동절 연휴가 있는데 이 시기는 특히 호텔 등을 예약하기가 쉽지가 않으므로 이점을 고려해서 여행 일정을 잡는 것이 좋습니다.


### (4) 겨울철 (12월 ~ 2월)
미국 뉴욕의 겨울은 사실 11월 정도에 시작되는데 그 추위의 강도가 서울에서 느끼는 것과는 사뭇 다릅니다.
12월 부터 시작되는 본격적인 겨울은 영하 20도 이하의 날씨를 보일 때도 많으며 상상을 초월하는 눈이 내리는 경우가 1년에 2-3번은 꼭 있습니다.
하지만 겨울에도 좋은 일정을 잡으면 뉴욕 맨하튼 주변의 관광지들을 조금은 여유롭게 즐길 수 있습니다.
또한 뉴욕에서 멀지 않은 스키장 등을 방문해 본다면 우리나라에서 느낄 수 없는 자연설에 황제 스키를 즐길 수 있습니다.</link>
            <guid isPermaLink="true">http://localhost:3000/travel/미국/


## 미국 뉴욕 날씨[뉴욕 날씨 보기](https://www.accuweather.com/ko/us/new-york/10021/weather-forecast/349727)

뉴욕은 미국의 수도는 아니지만 미국에서 가장 큰 도시로 정말로 많은 전세계 관광객들이 방문하는 경제의 중심지이자 최고의 관광도시라고 할 수 있습니다.[뉴욕 날씨 보기](https://www.accuweather.com/ko/us/new-york/10021/weather-forecast/349727)

###### 미국 뉴욕으로 여행을 갈때 고려해야 할 사항 중 하나가 바로 [계절별날씨](https://www.accuweather.com/ko/us/new-york/10021/weather-forecast/349727)입니다. 
뉴욕은 우리나라와 마찬가지로 사계절이 뚜렸하지만 겨울에는 서울 보다는 추운 날씨가 많고 여름에는 조금은 건조한 기후를 나타냅니다.

이번 포스팅에서는 여행자로서[뉴욕 날씨 보기](https://www.accuweather.com/ko/us/new-york/10021/weather-forecast/349727)
 고려해야할 미국의 계절별 날씨에 대해서 알아보도록 하겠습니다.





## 여행자가 알아야 할 뉴욕 날씨

### (1) 봄철 (3월 ~ 5월)
미국 뉴욕의 봄철 날씨는 전반적으로 서울 보다는 더 추운 경우가 많습니다. 우리나라 보다는 봄이 늦게 오며 3월까지는 아침에는 영하권의 날씨를 보이는 날도 꽤나 있습니다.
3월에서 4월초까지는 곳곳에 쌓여있는 눈을 볼 수 있을 정도로 우리가 생각하는 것 보다는 추운날씨를 보이기 때문에 3월, 4월에 뉴욕을 여행하는 사람들은 조금 두꺼운 외투를 준비하는 것이 좋습니다.
드문 경우이기는 하지만 5월에도 눈이 내리는 경우도 있으니 참고하면 좋을 것 같고 일반적으로는 4월말 ~ 5월초 부터는 야외에서 활동하기에 좋은 날씨가 이어집니다.
날씨와 함께 고려할 점은 미국의 학교들은 3월에 봄방학이 있으며 이 시기에는 호텔, 항공권 등의 가격이 일시적으로 오르는 경우가 있으니 저렴한 여행을 원한다면 이 시기를 피하는 것이 좋습니다.


### (2) 여름철 (6월 ~ 8월)
뉴욕의 여름은 우리나라 보다는 건조하며 화창한 날씨를 보이는 경우가 많이 있습니다. 이 시기가 여행하기에는 가장 좋지만 또한 항공권, 호텔 등의 가격이 제일 비싼 시기인 것 같습니다.
대부분 미국의 초중고 학교들이 6월말에 방학을 시작하기 때문에 여름철에 뉴욕을 여행하기에 가장 좋은 시기는 6월 초중순입니다.
7월, 8월은 30도가 넘는 무더운 날씨가 이어지는 경우도 있지만 우리나라 보다는 건조하기 때문에 불꽤지수는 상대적으로 낮은 편입니다.
여름철에는 우리나라 장마처럼 지속적으로 비가 오는 경우는 없지만 간혹 소나기가 오는 경우가 꽤 있으니 우산, 우비 등을 준비해 가면 여행에 큰 도움이 됩니다.


### (3) 가을철 (9월 ~ 11월)
뉴욕의 가을은 정말로 아름답고 누구나 한번쯤은 경험해 보고 싶은 정말로 여행하기 좋은 시즌입니다.
뉴욕은 8월말 정도만 되어도 아침의 날씨는 서늘한 느낌을 받을 수 있으며 확실히 우리나라 보다는 가을이 빨리 오는 것을 느낄 수 있습니다.
특히 9월말 부터 시작되는 가을 단풍은 우리나라의 단풍과는 다른 운치를 느낄 수 있어서 항상 좋은 느낌을 받는 것 같습니다.
10월에는 센트럴파크만 가도 충분히 가을을 만끽할 수 있으며 10월 마지막 날은 할로윈이라는 행사를 도시 어느 곳에서나 체험할 수 있는 좋은 기회입니다.
9월 첫째주는 미국에 노동절 연휴가 있는데 이 시기는 특히 호텔 등을 예약하기가 쉽지가 않으므로 이점을 고려해서 여행 일정을 잡는 것이 좋습니다.


### (4) 겨울철 (12월 ~ 2월)
미국 뉴욕의 겨울은 사실 11월 정도에 시작되는데 그 추위의 강도가 서울에서 느끼는 것과는 사뭇 다릅니다.
12월 부터 시작되는 본격적인 겨울은 영하 20도 이하의 날씨를 보일 때도 많으며 상상을 초월하는 눈이 내리는 경우가 1년에 2-3번은 꼭 있습니다.
하지만 겨울에도 좋은 일정을 잡으면 뉴욕 맨하튼 주변의 관광지들을 조금은 여유롭게 즐길 수 있습니다.
또한 뉴욕에서 멀지 않은 스키장 등을 방문해 본다면 우리나라에서 느낄 수 없는 자연설에 황제 스키를 즐길 수 있습니다.</guid>
        </item>
    </channel>
</rss>